/********************************************
*	MapType for SpeedBallArena				*
*	Author:		steeffeen					*
*	Contact:	steeffeen@team-devota.com	*
********************************************/

#RequireContext CSmMapType

#Const	Version	"1.4 (2014-08-31)"

#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Anchor.Script.txt" as Anchor

#Const Rules """You must place exactly one Spawn #1 and one Spawn #2.

You must place exactly one of each Goal, while:
- Goal #1 is captured by the Team of Spawn #2
- Goal #2 is captured by the Team of Spawn #1
- Goal #3 is the Ball Spawn"""

// Check if the map is valid
Void UpdateValidability() {
	ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
	Anchor::UpdateAnchorCounts();
	
	// Check for needed spawns and goals
	for (I, 1, 2) {
		if (!Anchor::HasExactlyOneAnchor("Goal", I, "You must place exactly one Goal #"^I^"!")) {
			return;
		}
		if (!Anchor::HasExactlyOneAnchor("Spawn", I, "You must place exactly one Spawn #"^I^"!")) {
			return;
		}
	}
	if (!Anchor::HasExactlyOneAnchor("Goal", 3, "You must place exactly one Spawn #3 (Ball)!")) {
		return;
	}
	
	// Check for unused spawns and goals
	if (Anchor::HasAtLeastOneAnchor("Spawn", 0, "")) {
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = _("You have at least one unused spawn!");
		return;
	}
	if (Anchor::HasAtLeastOneAnchor("Goal", 0, "")) {
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = _("You have at least one unused goal!");
		return;
	}
	
	ValidationStatus = CSmMapType::ValidationStatus::Validated;
	ValidabilityRequirementsMessage = "";
}

// Return the manialink for spawn anchor edition
Text EditSpawnAnchorManialink(Ident _EditedAnchorDataId) {
	return """<script><!--
		#Include "MathLib" as MathLib
		#Include "TextLib" as TextLib
		
		main() {
			declare Buttons = [	(Page.GetFirstChild("1") as CMlLabel), 
								(Page.GetFirstChild("2") as CMlLabel)];
			
			declare Text AnchorTag for Page;
			declare Integer AnchorOrder for Page;
			declare Boolean Finish for Page;
			
			Finish = False;	
			while (!Finish) {
				yield;
				
				foreach (Button in Buttons) {
					if (AnchorOrder == TextLib::ToInteger(Button.ControlId) || AnchorTag == Button.ControlId) {
						Button.Value = "$090"^Button.ControlId;
					} else {
						Button.Value = "$fff"^Button.ControlId;
					}
				}
				
				foreach (Event in PendingEvents) {
					switch(Event.Type){
						case CMlEvent::Type::MouseClick : {
							switch (Event.ControlId) {
								case "Cancel": {
								}
								default: {
									AnchorTag = "Spawn";
									AnchorOrder = TextLib::ToInteger(Event.ControlId);
								}
							}
							Finish = True;
						}	
					}
				}
			}
		}			
	--></script>
	<frame posn="120 40">
		<quad posn="0 0 2" sizen="72 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 5 3" halign="center" valign="bottom" style="TextTitle3" translate="1" textprefix="$fff" text="Edit Spawn"/>
		
		<quad posn="0 0 -1" sizen="68 28" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<frame posn="0 -4">
			<label id="1" posn="-10 0" scale="1.5" halign="left" style="TextValueBig" scriptevents="1"/>
			<label id="2" posn="10 0" scale="1.5" halign="right" style="TextValueBig" scriptevents="1"/>
			<label id="Cancel" posn="0 -15" halign="center" style="CardButtonSmall" scriptevents="1" translate="1" text="Cancel"/>
		</frame>
    </frame>
	<frame posn="120 -3">
		<quad posn="0 0 2" sizen="72 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 5 3" halign="center" valign="bottom" style="TextTitle3" translate="1" textprefix="$fff" text="Rules"/>
		
		<quad posn="0 0 -1" sizen="68 42" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<label posn="-30 -4" sizen="60 5" autonewline="1" style="TextCardSmallScores2" translate="1" textprefix="$ddd" text="{{{Rules}}}"/>
	</frame>""";
}

// Return the manialink for goal anchor edition
Text EditGoalAnchorManialink(Ident _EditedAnchorDataId) {
	return """<script><!--
		#Include "MathLib" as MathLib
		#Include "TextLib" as TextLib
		
		main() {
			declare Buttons = [	(Page.GetFirstChild("1") as CMlLabel),
								(Page.GetFirstChild("2") as CMlLabel),
								(Page.GetFirstChild("3") as CMlLabel)];
			
			declare Text AnchorTag for Page;
			declare Integer AnchorOrder for Page;
			declare Boolean Finish for Page;
			
			Finish = False;	
			while (!Finish) {
				yield;
				
				foreach (Button in Buttons) {
					if (AnchorOrder == TextLib::ToInteger(Button.ControlId) || AnchorTag == Button.ControlId) {
						Button.Value = "$090"^Button.ControlId;
					} else {
						Button.Value = "$fff"^Button.ControlId;
					}
				}
				
				foreach (Event in PendingEvents) {
					switch(Event.Type){
						case CMlEvent::Type::MouseClick : {
							switch (Event.ControlId) {
								case "Cancel": {
								}
								default: {
									AnchorTag = "Goal";
									AnchorOrder = TextLib::ToInteger(Event.ControlId);
								}
							}
							Finish = True;
						}	
					}
				}
			}
		}			
	--></script>
	<frame posn="120 40">
		<quad posn="0 0 2" sizen="72 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 5 3" halign="center" valign="bottom" style="TextTitle3" translate="1" textprefix="$fff" text="Edit Goal"/>
		
		<quad posn="0 0 -1" sizen="68 28" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<frame posn="0 -4">
			<label id="1" posn="-14 0" scale="1.4" halign="left" style="TextValueBig" scriptevents="1"/>
			<label id="2" posn="0 0" scale="1.4" halign="center" style="TextValueBig" scriptevents="1"/>
			<label id="3" posn="14 0" scale="1.4" halign="right" style="TextValueBig" scriptevents="1"/>
			<label id="Cancel" posn="0 -15" halign="center" style="CardButtonSmall" scriptevents="1" translate="1" text="Cancel"/>
		</frame>
    </frame>
	<frame posn="120 -3">
		<quad posn="0 0 2" sizen="72 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 5 3" halign="center" valign="bottom" style="TextTitle3" translate="1" textprefix="$fff" text="Rules"/>
		
		<quad posn="0 0 -1" sizen="68 42" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<label posn="-30 -3" sizen="60 5" autonewline="1" style="TextCardSmallScores2" translate="1" textprefix="$ddd" text="{{{Rules}}}"/>
	</frame>""";
}

// Show the anchor edition manialink
Void EditAnchorData(Ident _EditedAnchorDataId) {
	UpdateValidability();

	declare Text AnchorTag for ManialinkPage;
	declare Integer AnchorOrder for ManialinkPage;
	declare Boolean Finish for ManialinkPage;
	
	switch (AnchorData[_EditedAnchorDataId].DefaultTag) {
		case "Spawn": {
			ManialinkText = EditSpawnAnchorManialink(_EditedAnchorDataId);
		}
		case "Goal": {
			ManialinkText = EditGoalAnchorManialink(_EditedAnchorDataId);
		}
		case "Checkpoint": {
			ManialinkText = EditGoalAnchorManialink(_EditedAnchorDataId);
		}
	}
	AnchorTag = AnchorData[_EditedAnchorDataId].Tag;
	AnchorOrder = AnchorData[_EditedAnchorDataId].Order;
	
	Finish = False;
	while (!Finish) {
		yield;
	}
	
	AnchorData[_EditedAnchorDataId].Tag = AnchorTag;
	AnchorData[_EditedAnchorDataId].Order = AnchorOrder;
	
	UpdateValidability();
}

// Main
main() {
	CustomEditAnchorData = True;
	declare metadata Text ScriptVersion for Map;
	ScriptVersion = Version;
	
	UpdateValidability();
	
	while (True) {
		yield;
		
		ManialinkText = "";
		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CPluginEvent::Type::MapModified: {
					UpdateValidability();
				}
				case CPluginEvent::Type::EditAnchor: {
					EditAnchorData(Event.EditedAnchorDataId);
				}
				case CPluginEvent::Type::StartValidation: {
					StartTestMapWithMode("SpeedBall.Script.txt");
				}
			}
		}		
	}	
}
