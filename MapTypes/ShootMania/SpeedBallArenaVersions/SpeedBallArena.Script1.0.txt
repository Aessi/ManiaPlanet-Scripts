/********************************
*	MapType for SpeedBallArena	*
********************************/

#RequireContext CSmMapType

#Const	Version	"1.0 (2013-03-17"

#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Anchor.Script.txt" as Anchor

#Const Rules "You must place exactly one Spawn #1 and one Spawn #2.\n\nYou must place exactly one of each Goal, while Team Spawn #1 captures at Goal #2, Spawn #2 captures at Goal #1 and Goal #3 is the ball spawn."

// Check if the map is valid
Void UpdateValidability() {
	ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
	Anchor::UpdateAnchorCounts();
	
	// Check for needed spawns and goals
	for (I, 1, 2) {
		if (!Anchor::HasExactlyOneAnchor("Goal", I, "You must place exactly one of each Goal #"^I^"!")) {
			return;
		}
		if (!Anchor::HasExactlyOneAnchor("Spawn", I, "You must place exactly one Spawn #"^I^"!")) {
			return;
		}
	}
	if (!Anchor::HasExactlyOneAnchor("Goal", 3, "You must place exactly one Spawn #3 (Ball)!")) return;
	
	// Check for unused spawns and goals
	if (Anchor::HasAtLeastOneAnchor("Spawn", 0, "") || Anchor::HasAtLeastOneAnchor("Spawn", 3, "")) {
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = "You have at least one unused spawn!";
		return;
	}
	if (Anchor::HasAtLeastOneAnchor("Goal", 0, "")) {
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = "You have at least one unused goal!";
		return;
	}
	
	ValidationStatus = CSmMapType::ValidationStatus::Validated;
	ValidabilityRequirementsMessage = "";
}

// Return the manialink for anchor edition
Text EditAnchorManialink(Text _Tag) {
	declare MLText = 		
	"""
	<script><!--
		#Include "TextLib" as TextLib
		
		main() {
			declare Buttons = [
			(Page.GetFirstChild("1") as CMlLabel), 
			(Page.GetFirstChild("2") as CMlLabel),
			(Page.GetFirstChild("3") as CMlLabel)];
			
			declare Integer AnchorOrder for Page;
			declare Text	AnchorTag for Page;
			declare Boolean Finish for Page;
			Finish = False;	
			while(!Finish) {
				yield;
				foreach(Button in Buttons) {
					if(AnchorOrder == TextLib::ToInteger(Button.ControlId))
						Button.Value = "$090"^Button.ControlId;
					else 
						Button.Value = "$fff"^Button.ControlId;
				}
				
				foreach(Event in PendingEvents) {
					switch(Event.Type){
						case CMlEvent::Type::MouseClick : {
							if (Event.ControlId != "Cancel") AnchorOrder = TextLib::ToInteger(Event.ControlId);
							Finish = True;
						}	
					}
				}
			}
		}			
	--></script>
	<frame posn="120 35">
		<quad posn="0 0 -1" sizen="70 23" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<quad posn="0 0 2" sizen="74 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 5 3" halign="center" valign="bottom" style="TextTitle3" text="$fffEdit{{{" "^_Tag}}}" />
		<frame posn="0 -4">
			<label id="1" posn="-10 0" scale="2" halign="center" style="TextButtonMedium" ScriptEvents="true"/>
			<label id="2" posn="0 0" scale="2" halign="center" style="TextButtonMedium" ScriptEvents="true"/>
			<label id="3" posn="10 0" scale="2" halign="center" style="TextButtonMedium" ScriptEvents="true"/>
		</frame>
		<label id="Cancel" text="Cancel" posn="0 -13" halign="center" style="CardButtonSmall" ScriptEvents="true"/>
    </frame>
	<frame posn="120 -3">
		<quad posn="0 0 2" sizen="74 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 5 3" halign="center" valign="bottom" style="TextTitle3" text="$fffRules" />
		<quad posn="0 0 -1" sizen="70 37" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<frame posn="-30 -4">
			<label posn="0 0" sizen="60 5" autonewline="1" style="TextCardSmallScores2" text="$222{{{ Rules }}}" />
		</frame>
	</frame>
	""";
  
	return MLText;
}

// Show the anchor edition manialink
Void EditAnchorData(Ident _EditedAnchorDataId) {	
	UpdateValidability();

	declare Integer AnchorOrder for ManialinkPage;
	declare Boolean Finish for ManialinkPage;
	
	ManialinkText = EditAnchorManialink(AnchorData[_EditedAnchorDataId].Tag);
	AnchorOrder = AnchorData[_EditedAnchorDataId].Order;
	Finish = False;
	while (!Finish) {
		yield;
	}
	AnchorData[_EditedAnchorDataId].Order = AnchorOrder;
	
	UpdateValidability();
}

// Main
main() {
	CustomEditAnchorData = True;
	UpdateValidability();
	
	while (True) {
		yield;
		
		ManialinkText = "";
		foreach(Event in PendingEvents) {
			switch (Event.Type) {
				case CPluginEvent::Type::MapModified: {
					UpdateValidability();
				}
				case CPluginEvent::Type::EditAnchor: {
					EditAnchorData(Event.EditedAnchorDataId);
				}
			}
		}		
	}	
}
