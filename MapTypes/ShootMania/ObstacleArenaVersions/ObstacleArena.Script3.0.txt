/****************************************
*	MapType for Obstacle Maps			*
*	Author:		steeffeen				*
*	Contact:	schteffens@gmail.com	*
****************************************/

#RequireContext CSmMapType

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Anchor.Script.txt" as Anchor

#Const	Version			"3.0 (2013-08-17)"

/***************************************************
	CONSTANTS
***************************************************/

/***************************************************
	TEXTS
***************************************************/

#Const	SpawnRules		"""You must place $<$f00exactly one Spawn$> and you can place $<$00fas much CPSpawns as you want$>.
CPSpawns should be placed close to their Checkpoints.

$<$0ddSpecial Spawns:$>
$<$066SpawnType1:$> Nucleus
$<$066SpawnType2:$> No Ammunition

You are able to assign an Order to CPSpawns so that Players spawn at these specific ones after reaching a Checkpoint with the same Order."""

#Const	CPRules			"""You have to place $<$f00at least one Goal$> and $<$00fas much Checkpoints as you want$>.

$<$0ddSpecial Checkpoints:$>
$<$066CheckpointType1:$> No Ammunition
$<$066CheckpointType2:$> Endless Ammunition
$<$066CheckpointType3:$> Portal Checkpoint
(Standard Checkpoints will reset the Ammunition to default.)

Portals don't have to be reached and teleport Players to the next Spawn.

You are able to assign an Order to Checkpoints forcing the Players to reach the CPs in this Order."""

#Const	ObjectsHelp """You can rotate Custom $oBlocks$o with the Arrow Keys and +/- on the Numpad.

The OffZone $oItem$o can be picked up to be able to walk through OffZone for 5 seconds."""

/***************************************************
	GLOBALES
***************************************************/

declare Ident	G_StartSpawnId;
declare Ident[]	G_KnownIds;
declare Boolean	G_ObjectsHelpShown;

/***************************************************
	LABELS
***************************************************/

***StartValidation***
***
StartTestMapWithMode("Obstacle.Script.txt");
***

/***************************************************
	FUNCTIONS
***************************************************/

// Initialize the anchors
Void InitAnchors() {
	G_StartSpawnId = NullId;
	G_KnownIds.clear();
	foreach (Data in AnchorData) {
		switch (Data.DefaultTag) {
			case "Spawn": {
				if (G_StartSpawnId == NullId && TextLib::SubString(Data.Tag, 0, 5) == "Spawn") {
					G_StartSpawnId = Data.Id;
				}
			}
		}
		G_KnownIds.add(Data.Id);
	}
}

// Check if the map is valid
Void UpdateValidability() {	 
	Anchor::UpdateAnchorCounts();
	
	// Local anchors
	declare AnchorDataTags = Text[];
	foreach (Data in AnchorData) {
		AnchorDataTags.add(Data.Tag);
	}
	
	// Exactly one spawn
	declare SpawnTags = ["Spawn", "SpawnType1", "SpawnType2"];
	declare SpawnExists = 0;
	foreach (Tag in AnchorDataTags) {
		if (SpawnTags.exists(Tag)) {
			SpawnExists += 1;
		}
	}
	if (SpawnExists != 1) {
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = _("You must place exactly one start Spawn.");
		return;
	}
	
	// At least one goal
	if (!Anchor::HasAtLeastOneAnchor("Goal", 0, _("You must place at least one Goal."))) {
		return;
	}
	
	// Check checkpoint order
	declare CheckpointOrders = Integer[Integer];
	foreach (Anchor in AnchorData) {
		if (TextLib::SubText(Anchor.Tag, 0, 10) == "Checkpoint") {
			if (!CheckpointOrders.existskey(Anchor.Order)) {
				CheckpointOrders[Anchor.Order] = 1;
			} else {
				CheckpointOrders[Anchor.Order] += 1;
			}
		}
	}
	
	if (CheckpointOrders.count > 1 && CheckpointOrders.existskey(0)) {
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = TextLib::Compose(_("You have %1 Checkpoints without an assigned Order!"), TextLib::ToText(CheckpointOrders[0]));
		return;
	}
	
	// Update validation status
	ValidationStatus = CSmMapType::ValidationStatus::Validated;
}

// Checks for new anchors and sets initial tags
Void UpdateAnchors() {
	// Check if known anchors has been deleted
	declare Ident[] DeletedIds;
	foreach (Id in G_KnownIds) {
		if (!AnchorData.existskey(Id)) {
			DeletedIds.add(Id);
		}
	}
	declare Boolean Removed;
	foreach (Id in DeletedIds) {
		Removed = G_KnownIds.remove(Id);
	}
	
	// Check if former start spawn has been deleted or modified
	if (G_StartSpawnId != NullId) {
		declare StartSpawnSet = False;
		foreach (Data in AnchorData) {
			if (Data.Id == G_StartSpawnId) {
				if (Data.Tag == "Spawn") {
					StartSpawnSet = True;
				}
				break;
			}
		}
		if (!StartSpawnSet) {
			G_StartSpawnId = NullId;
		}
	}
	
	// Assign new initial tag if necessary
	foreach (Data in AnchorData) {
		// Only touch new anchors
		if (!G_KnownIds.exists(Data.Id)) {
			switch (Data.DefaultTag) {
				case "Spawn": {
					if (G_StartSpawnId == NullId) {
						G_StartSpawnId = Data.Id;
					} else {
						Data.Tag = "CPSpawn";
					}
				}
				case "Goal": {
					Data.Tag = "Checkpoint";
				}
			}
			G_KnownIds.add(Data.Id);
		}
	}
}

// Manialink for goals
Text EditGoalsManialink() {
	return """<script><!--
		main() {
			declare Buttons = [
				(Page.GetFirstChild("No-Function") as CMlLabel),
				(Page.GetFirstChild("Portal") as CMlLabel),
				(Page.GetFirstChild("Goal") as CMlLabel),
				(Page.GetFirstChild("Checkpoint") as CMlLabel),
				(Page.GetFirstChild("CheckpointType1") as CMlLabel),
				(Page.GetFirstChild("CheckpointType2") as CMlLabel),
				(Page.GetFirstChild("CheckpointType3") as CMlLabel)];
			
			declare OrderEntry <=> (Page.GetFirstChild("OrderEntry") as CMlEntry);
			
			declare Boolean Finish for Page;
			declare Text AnchorTag for Page;
			declare Text AnchorOrder for Page;
			
			OrderEntry.Value = AnchorOrder;
			
			Finish = False;	
			while (!Finish) {
				yield;
				
				foreach(Button in Buttons) {
					if (AnchorTag == Button.ControlId) {
						Button.Value = "$090"^Button.ControlId;
					} else {
						Button.Value = "$fff"^Button.ControlId;
					}
				}
				
				foreach (Event in PendingEvents) {
					switch(Event.Type){
						case CMlEvent::Type::MouseClick: {
							if (Event.ControlId != "Cancel") {
								AnchorTag = Event.ControlId;
								switch (AnchorTag) {
									case "Goal": {
										AnchorOrder = ""^0;
									}
									default: {
										AnchorOrder = OrderEntry.Value;
									}
								}
							}
							Finish = True;
						}	
					}
				}
			}
		}			
	--></script>
	<frame posn="120 52">
		<quad posn="0 13 2" sizen="74 12" halign="center" valign="center2" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 13 3" sizen="70 12" style="TextTitle3" translate="1" textprefix="$fff" text="Edit Goal or Checkpoint"
			halign="center" valign="center2"/>
		
		<quad posn="0 8 -1" sizen="70 54" halign="center" valign="top" style="Bgs1" substyle="BgWindow2"/>
		<frame posn="0 -4">
			<label id="No-Function" posn="0 8" scale="1.4" halign="center" style="TextButtonMedium" ScriptEvents="1"/>
			<label id="Portal" posn="0 2" scale="1.4" halign="center" style="TextButtonMedium" ScriptEvents="1"/>
			<label id="Goal" posn="0 -4" scale="1.4" halign="center" style="TextButtonMedium" ScriptEvents="1"/>
			<label id="Checkpoint" posn="0 -10" scale="1.4" halign="center" style="TextButtonMedium" ScriptEvents="1"/>
			<label id="CheckpointType1" posn="-31 -16" scale="0.8" halign="left" style="TextButtonMedium" ScriptEvents="1"/>
			<label id="CheckpointType2" posn="33 -16" scale="0.8" halign="right" style="TextButtonMedium" ScriptEvents="1"/>
			<label id="CheckpointType3" posn="0 -20" scale="0.8" halign="center" style="TextButtonMedium" ScriptEvents="1"/>
			<format textcolor="00fc"/>
			<label posn="-11 -27" text="Order:" translate="1" valign="center"/>
			<entry id="OrderEntry" posn="15 -27.5" sizen="10 4.7" halign="right" valign="center" default="0" ScriptEvents="1"/>
		</frame>
		<label id="Cancel" text="Cancel" posn="0 -37" halign="center" style="CardButtonSmall" translate="1" ScriptEvents="1"/>
    </frame>
	<frame posn="120 -5">
		<quad posn="0 5 2" sizen="74 12" halign="center" valign="center2" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 5 3" sizen="70 12" halign="center" valign="center2" style="TextTitle3" translate="1" textprefix="$fff" text="Rules"/>
		
		<quad posn="0 0 -1" sizen="70 62" halign="center" valign="top" style="Bgs1" substyle="BgWindow2"/>
		<label posn="-32 -3" sizen="64 7" autonewline="1" style="TextCardSmallScores2" translate="1" textprefix="$111" text="{{{CPRules}}}"/>
	</frame>""";
}

// Manialink for spawns
Text EditSpawnsManialink() {
	return """<script><!--
		main() {
			declare Buttons = [
				(Page.GetFirstChild("No-Function") as CMlLabel),
				(Page.GetFirstChild("CPSpawn") as CMlLabel),
				(Page.GetFirstChild("Spawn") as CMlLabel),
				(Page.GetFirstChild("SpawnType1") as CMlLabel),
				(Page.GetFirstChild("SpawnType2") as CMlLabel)];
			
			declare OrderEntry <=> (Page.GetFirstChild("OrderEntry") as CMlEntry);
			
			declare Boolean Finish for Page;
			declare Text AnchorTag for Page;
			declare Text AnchorOrder for Page;
			
			OrderEntry.Value = AnchorOrder;
			
			Finish = False;	
			while (!Finish) {
				yield;
				
				foreach (Button in Buttons) {
					if (AnchorTag == Button.ControlId) {
						Button.Value = "$090"^Button.ControlId;
					} else {
						Button.Value = "$fff"^Button.ControlId;
					}
				}
				
				foreach (Event in PendingEvents) {
					switch (Event.Type){
						case CMlEvent::Type::MouseClick: {
							if (Event.ControlId != "Cancel") {
								AnchorTag = Event.ControlId;
								switch (AnchorTag) {
									case "CPSpawn": {
										AnchorOrder = OrderEntry.Value;
									}
									default: {
										AnchorOrder = ""^0;
									}
								}
							}
							Finish = True;
						}	
					}
				}
			}
		}			
	--></script>
	<frame posn="120 45">
		<quad posn="0 13 2" sizen="74 12" halign="center" valign="center2" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 13 3" sizen="70 12" halign="center" valign="center2" style="TextTitle3" translate="1" textprefix="$fff" text="Edit Spawn"/>
		
		<quad posn="0 8 -1" sizen="70 52" halign="center" valign="top" style="Bgs1" substyle="BgWindow2"/>
		<frame posn="0 -4">
			<label id="No-Function" posn="0 8" scale="1.4" halign="center" style="TextButtonMedium" ScriptEvents="1"/>
			<label id="CPSpawn" posn="0 1" scale="1.4" halign="center" style="TextButtonMedium" ScriptEvents="1"/>
			<label id="Spawn" posn="0 -6" scale="1.4" halign="center" style="TextButtonMedium" ScriptEvents="1"/>
			<label id="SpawnType1" posn="-5 -14" scale="0.8" halign="right" style="TextButtonMedium" ScriptEvents="1"/>
			<label id="SpawnType2" posn="5 -14" scale="0.8" halign="left" style="TextButtonMedium" ScriptEvents="1"/>
			<format textcolor="00fc"/>
			<label posn="-11 -22" text="Order:" translate="1" valign="center"/>
			<entry id="OrderEntry" posn="15 -22.5" sizen="10 4.7" halign="right" valign="center" default="0" ScriptEvents="1"/>
		</frame>
		<label id="Cancel" text="Cancel" posn="0 -33" halign="center" style="CardButtonSmall" translate="1" ScriptEvents="1"/>
    </frame>
	<frame posn="120 -11">
		<quad posn="0 5 2" sizen="74 12" halign="center" valign="center2" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 5 3" sizen="74 12" halign="center" valign="center2" style="TextTitle3" textprefix="$fff" translate="1" text="Rules"/>
		
		<quad posn="0 0 -1" sizen="70 51" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<label posn="-32 -3" sizen="64 7" autonewline="1" style="TextCardSmallScores2" translate="1" textprefix="$111" text="{{{SpawnRules}}}"/>
	</frame>""";
}

// Manialink for non editable anchor
Text NoEditManialink() {
	return """<script><!--			
			main() {
				declare Boolean Finish for Page;
				Finish = False;	
				while (!Finish) {
					yield;
					
					foreach (Event in PendingEvents) {
						switch (Event.Type){
							case CMlEvent::Type::MouseClick: {
								Finish = True;
							}	
						}
					}
				}
			}			
		--></script>
		<frame posn="120 35">
			<quad posn="0 0 -1" sizen="70 15" halign="center" style="Bgs1" substyle="BgWindow2"/>
			<quad posn="0 0 2" sizen="74 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
			<label posn="0 5.5 3" scale="0.9" style="TextTitle3" translate="1" textprefix="$fff" text="This Anchor is not editable"
				halign="center" valign="bottom"/>
			<label text="Okay" posn="0 -3.5 3" halign="center" style="CardButtonMedium" translate="1" ScriptEvents="1"/>
	    </frame>""";
}

// Show the anchor editing manialink
Void EditAnchorData(Ident _EditedAnchorDataId) {
	declare Boolean Finish for ManialinkPage;
	declare Text AnchorTag for ManialinkPage;
	declare Text AnchorOrder for ManialinkPage;
	
	switch (AnchorData[_EditedAnchorDataId].DefaultTag) {
		case "Goal": {
			ManialinkText = EditGoalsManialink();
		}
		case "Checkpoint": {
			ManialinkText = EditGoalsManialink();
		}
		case "Spawn": {
			ManialinkText = EditSpawnsManialink();
		}
		default: {
			ManialinkText = NoEditManialink();
		}
	}
	
	AnchorTag = AnchorData[_EditedAnchorDataId].Tag;
	AnchorOrder = TextLib::ToText(AnchorData[_EditedAnchorDataId].Order);
	
	Finish = False;
	while (!Finish) {
		yield;
	}
	AnchorData[_EditedAnchorDataId].Tag = AnchorTag;
	AnchorData[_EditedAnchorDataId].Order = TextLib::ToInteger(AnchorOrder);
	
	UpdateValidability();
}

// Show manialink with help text regarding custom objects
Void ShowObjectsHelp() {
	if (G_ObjectsHelpShown) return;
	declare Manialink = """<script><!--
		main() {
			declare Finished for Page = False;
			
			while (True) {
				yield;
				
				foreach (Event in PendingEvents) {
					switch (Event.Type) {
						case CMlEvent::Type::MouseClick: {
							switch (Event.ControlId) {
								case "Label_Okay": {
									Finished = True;
								}
							}
						}
					}
				}
			}
		}
		--></script>
		<frame>
			<quad posn="0 23 -10" sizen="80 15" style="Bgs1InRace" substyle="BgTitle3_5" halign="center" valign="center2"/>
			<label posn="0 23 -5" textsize="5" style="TextTitle1" translate="1" text="Objects and Items" halign="center" valign="center2"/>
			
			<quad posn="0 -8 -10" sizen="160 40" style="Bgs1" substyle="BgWindow3" halign="center" valign="center2"/>
			<label posn="0 5 -5" sizen="150 0" translate="1" text="{{{ObjectsHelp}}}" halign="center" valign="center2"/>
			<label id="Label_Okay" posn="0 -20 -5" style="CardButtonMedium" translate="1" text="Okay" halign="center" valign="center2" scriptevents="1"/>
		</frame>""";
	declare Boolean Finished for ManialinkPage;
	Finished = False;
	ManialinkText = Manialink;
	while (!Finished && PlaceMode == CEditorPlugin::PlaceMode::Unknown && EditMode == CEditorPlugin::EditMode::Place) {
		yield;
	}
	if (Finished) {
		G_ObjectsHelpShown = True;
	}
	ManialinkText = "";
}

/***************************************************
	MAIN
***************************************************/

main() {
	log("ObstacleArena.Script.txt loaded!");
	log("Version: "^Version);

	CustomEditAnchorData = True;
	G_ObjectsHelpShown = False;
	
	declare metadata Text ScriptVersion for Map;
	ScriptVersion = Version;

	InitAnchors();	
	UpdateValidability();
	
	while (True) {	
		yield;
		
		ManialinkText = "";
		
		switch (PlaceMode) {
			case CEditorPlugin::PlaceMode::Unknown: {
				if (G_ObjectsHelpShown) continue;
				ShowObjectsHelp();
			}
		}
			
		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CPluginEvent::Type::MapModified: {
					UpdateAnchors();
					UpdateValidability();
				}
				case CPluginEvent::Type::EditAnchor: {
					EditAnchorData(Event.EditedAnchorDataId);
				}
				case CPluginEvent::Type::StartValidation: {
					---StartValidation---
				}
				case CPluginEvent::Type::EditObjectives: {
					---EditObjectives---
				}
			}
		}		
	}	
}