/* ------------------------------------ */
//	SpeedBall Game Mode					//
//	Original is created by Awpteamoose	//
//	This version is made by steeffeen	//
/* ------------------------------------ */

/*
TODO:
- full clublinks/teams support
*/

#Extends "Modes/ShootMania/ModeBase.Script.txt"

#Const	CompatibleMapTypes	"SpeedBallArena"
#Const	Version				"1.4.5 (2013-02-23)"

/* INCLUDES */
#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Color.Script.txt" as Color
#Include "Libs/Nadeo/Interface.Script.txt" as Interface
#Include "Libs/Nadeo/TabsServer.Script.txt" as Tabs
#Include "Libs/Nadeo/Top2.Script.txt" as Top
#Include "Libs/Nadeo/Victory.Script.txt" as Victory
#Include "Libs/Nadeo/ShootMania/Achievements.Script.txt" as Achievements
#Include "Libs/Nadeo/ShootMania/AFK.Script.txt" as AFK
#Include "Libs/Nadeo/ShootMania/Airshot.Script.txt" as Airshot
#Include "Libs/Nadeo/ShootMania/BalancedWeapons.Script.txt" as BalancedWeapons
#Include "Libs/Nadeo/ShootMania/Score.Script.txt" as Score
#Include "Libs/Nadeo/ShootMania/ScoresTable.Script.txt" as ScoresTable
#Include "Libs/Nadeo/ShootMania/SM.Script.txt" as SM
#Include "Libs/Nadeo/ShootMania/SpawnScreen.Script.txt" as SpawnScreen
#Include "Libs/Nadeo/ShootMania/WarmUpSimple.Script.txt" as WarmUp

/* SETTINGS */
// Round settings
#Setting	S_TimeLimit			240		as _("Time limit per round (seconds)")
#Setting	S_OvertimeLimit		45		as _("Time limit during Overtime (seconds)")
#Setting	S_RoundsToWin		5		as _("Rounds to win a map")
#Setting	S_RoundGapToWin		2		as _("Rounds gap to win a map")
#Setting	S_RoundsLimit		10		as _("Total rounds limit per map (First team reaching X wins)")
#Setting	S_UseWarmUp			False	as _("Use warmUp before each map")
// Team settings
#Setting	S_AutoTeamBalance	False	as _("Automatically balance teams before each map")
#Setting	S_MaxPlayerCount	0		as _("Maximal count of players (0 = unlimited)")
#Setting	S_NbBotsBlue		0		as _("Number of bots in team Blue")
#Setting	S_NbBotsRed			0		as _("Number of bots in team Red")
#Setting	S_BotPower			2.0		as _("Defines the power of bots (Default: 2.0)")
// Gameplay settings
#Setting	S_UseBeta2Gameplay	True	as _("Use Beta2 gameplay")
#Setting	S_FriendlyFire		False	as _("Friendly fire (Damage team members)")
#Setting	S_LaserBattle		False	as _("Laser Battle (Rail gun for every player)")

/* CONSTANTS */
#Const	C_LogEnabled				False		// Enable/disable logging
#Const	C_ManageAFKPlayers			False		// Forces afk players into spec
// Gameplay constants
#Const	C_RespawnTime				3000		// Time until a player is respawned
#Const	C_EndRoundOnDrop			False		// Enabled: Round ends on drop / Disabled: On reset
#Const	C_DecResetTimeToEndRound	True		// Enable to constantly decrease the ball reset time to end the round
#Const	C_TimeToDecResetTime1Sec	30			// Time to decrease the reset time by 1 second (in seconds)
#Const	C_BallCarrierArmorReplenishGain	250		// Value for the armor regeneration of the ball carrier
#Const	C_UseAlternateBallWeaponVisual	True	// Use alternate weapon visual for ball carrier (white rockets)
#Const	C_BallPickUpDistance		2.1			// Distance to pick up the ball
#Const	C_DroppedBallResetTime		4500		// Time until a dropped ball will reset
#Const	C_NeededCaptureTime			1600		// Time needed for capturing
#Const	C_DecrScoreOnFriendHit		True		// Decrease score on friendly fire hit
#Const	C_NormalAmmoPower			1.0			// Ammunition power when running normal battle
#Const	C_InstaGibAmmoPower			0.5			// Ammunition power when running instagib battle
#Const	C_NormalExtraAmmoGain		0.0			// Additional ammunition gain when running normal battle
#Const	C_InstaGibExtraAmmoGain		0.5			// Additional ammunition gain when running instagib battle
#Const	C_LongestInstaPassDist		100.0		// Longest possible pass in instagib (0 = no limit, rockets fly up to 150m)
#Const	C_NucleusSelfDamage			False		// Nucleus explosions damage yourself (like a granate)
#Const	C_OnlyHighlightBallCarrier	False		// Enable to highlight ball carrier only (otherwise all players)
#Const	C_BotsCanHaveBall			True		// Disable to disallow bots to have the ball
// WarmUp constants
#Const	C_WarmUpDuration			90			// WarmUp duration
// UI constants
#Const	C_UITickInterval			250			// Interval of UI refreshes
#Const	C_UseDefaultScoreTable		False		// Use default score table
#Const	C_HideStuffAtMapEnd			True		// Enable to hide top rankings & stuff at map end
#Const	C_TeamsLayerAtTop			False		// Shows playerlist (if enabled) at the top of the screen
#Const	C_UseAchievements			True		// Enable/disable achievements (may spam your screen!)
#Const	C_UseAirshot				False		// Enable/disable airshot announcement
#Const	C_UsePositionLayer			True		// Enable/disable position layer (current ranking at bottom right)
#Const	C_UseTeamsLayer				True		// Enable/disable teams layer (playerlists on the sides)
#Const	C_UseSimpleTeamsLayer		False		// Enable/disable simple teams layer (playercounts at the top)
#Const	C_NbTeamHitMessage			3			// Times the team hit warning appears (0: deactivated, -1: endless)
#Const	C_NearMissDist				1.0			// Max distance (meters) for near miss messages (Range: 0.0-1.0)
#Const	C_ShowOvertimeExtra			True		// Shows an extra hint during overtime below the timer
#Const	C_ShowBallPicture			True		// Shows a ball picture above the ball carrier
// Clublink constants
#Const	C_UsePlayerClublinks		True		// Enable use of player clublinks
#Const	C_NeutralEmblemUrl			""			// Neutral emblem URL

/* TEXTS */
#Const	T_Ball				_("Ball")										// Ball text
#Const	T_BallReset			_("Ball has been reset!")						// Ball reset message
#Const	T_Overtime			_("Overtime")									// Overtime text
#Const	T_WaitForSpawn		_("Waiting to be spawned...")					// Waiting for spawn message
#Const	T_TeamHitMessage	_("$f81Attention! You shot a team member!")		// Warning when hitting a team member
// Top ranking names
#Const	T_Damage			"Damage"
#Const	T_Captures			"Captures"
#Const	T_Passes			"Passes"
#Const	T_Backstabber		"Backstabber"
// Description
#Const	Description			_("- Two teams fight for control of a Ball in order to capture the opponents pole.")

#Const	C_ImgBaseDir		"file://Media/Manialinks/Shootmania/Common/"

/* GLOBALES */
declare Ident G_BallCarrierId;					// IDs of the players who have the ball
declare Integer G_BallDropTime;					// Time when the ball was dropped
declare Integer G_BallArmorRegTime;				// Last time of ball armor regeneration
declare Integer G_LastBallResetSeconds;			// Seconds of the last reset countdown tick
declare Integer G_LastUIUpdate;					// Time when the last UI refresh was performed
declare Integer G_LastBigMessage;				// Time when the last BigMessage was send
declare Integer G_LastStatusMessage;			// Time when the last StatusMessage was send
declare Ident G_BallPoleId;						// Id of the ball pole
declare Ident[Integer] G_ClanSpawnIDs;			// BlockSpawn IDs of each clan
declare Ident[Integer] G_ClanPoleIDs;			// BlockPole IDs of each clan
declare Text G_PoleMarkers;						// Markers of clan poles
declare Vec3 G_BallHomePosition;				// Position of the ball spawn
declare Vec3 G_BallDropPosition;				// Actual position of the dropped ball
declare Vec3 G_LastBallPosition;				// Last known position of the ball (To drop the ball if ball carrier left)
declare Boolean G_Overtime;						// Whether overtime is active
declare Integer G_ExtraTimeStart;				// Time when the extra time started
declare Ident[] G_PlayingPlayerIDs;				// IDs of all playing players
declare Ident[] G_SpawnedPlayerIDs;				// IDs of all players that are allowed to spawn
declare Ident[] G_WaitingPlayerIDs;				// IDs of all players waiting to be spawned
declare Integer G_ResetTimeMessageStatus;		// Status of the -decreasing reset time- message
declare Integer G_LastAfkHandling;				// Time of last afk players handling
// Setting caches
declare Boolean Cache_S_FriendlyFire;			// Cache for S_FriendlyFire
declare Boolean Cache_S_LaserBattle;			// Cache for S_LaserBattle

/*****************************************************
	EXTENSIONS
*****************************************************/
***Rules***
***
// Create rules
declare ModeName = "SpeedBall 2.0";
declare BallText = """$<$6f1Ball$>""";

// Setting dependent rules
declare EndRoundVariant = "$3af";
if (C_EndRoundOnDrop) {
	EndRoundVariant ^= "drop";
} else {
	EndRoundVariant ^= "reset";
}
declare EndRoundVariantExtra = "";
if (C_DecResetTimeToEndRound) {
	EndRoundVariantExtra ^= """ (while the time to $<$3afreset$> the {{{BallText}}} constantly decreases)""";
}

declare ModeRules = """
- Two teams fight for control of the {{{BallText}}} in order to capture the opponents pole.
- Grab the {{{BallText}}} and get it to the enemys goalpost to score.
- Once you have the {{{BallText}}}, hit a player to $<$3afpass$> the {{{BallText}}}.
- If the {{{BallText}}} carrier dies, the {{{BallText}}} will drop at his position. It can be picked up by any player on any team for $<$f80{{{C_DroppedBallResetTime/1000.0}}}$> seconds before it resets.
- If neither team manages to score after $<$f80{{{S_TimeLimit}}}$> seconds the game continues until the next {{{BallText}}} $<{{{EndRoundVariant}}}$> before $<$f30Overtime$> kicks in$<{{{EndRoundVariantExtra}}}$>.
- You're able to win the round by capturing instantly or holding the {{{BallText}}} for $<$f80{{{S_OvertimeLimit}}}$> seconds during $<$f30Overtime$>.
""";
if (S_FriendlyFire) {
	ModeRules ^= """
- $<$f80Friendly Fire$> is activated! Pay attention to not damage your team mates!""";
}
if (S_LaserBattle) {
	ModeRules ^= """
- $<$f80LaserBattle$> is activated! Players spawn with lasers! (Hits cause still only 1 damage.)""";
}

SpawnScreen::CreateRules(ModeName, ModeRules, False);
***

***InitServer***
***
MB_UseLogging = C_LogEnabled;
***

***StartServer***
***
log("SpeedBall2.0 loaded!");
log("Version: "^Version);
log("Written by steeffeen. (Original by awpteamoose)");

---Rules---

// Teams
UseClans = True;

// Clublinks
MB_UsePlayerClublinks = C_UsePlayerClublinks;
MB_NeutralEmblemUrl = C_NeutralEmblemUrl;

// Init variables
MB_UseSectionRound = True;
G_LastUIUpdate = 0;
G_LastBigMessage = 0;
G_LastStatusMessage = 0;
G_LastAfkHandling = 0;

// Achievements
if (C_UseAchievements) {
	Achievements::InitSettings([
	//	"HitRocket",
	//	"HitRail",
	//	"HitNucleus",
	//	"PrecisionRocket",
	//	"PrecisionRail",
	//	"PrecisionNucleus",
		"LongestRail",
		"LongestRocket",
		"LongestAirShot",
		"AirStrike",
	//	"HitUntouched",
	//	"ComboHit",
	//	"LongestTime",
	//	"LessHited",
	//	"DistanceTravel",
	//	"TimeNearEnnemies",
	//	"AirTime",
	//	"ArmorReload",
		"HitAfterHited"
	]);
}

Color::Load();

// UI layers
declare LayerTeams <=> UIManager.UILayerCreate();
if (C_UseTeamsLayer) {
	if (C_TeamsLayerAtTop) {
		LayerTeams.ManialinkPage = """
			<playerlist posn="-107 90" halign="left" valign="top" style="" substyle="Small" lines="5" columns="2" team="1" status="Playing"/>
			<playerlist posn="107 90" halign="right" valign="top" style="" substyle="Small" lines="5" columns="2" team="2" status="Playing"/>""";
	} else {
		Interface::SetLayerTeams(LayerTeams);
	}
}

declare SimpleLayerTeams <=> UIManager.UILayerCreate();
if (C_UseSimpleTeamsLayer) {
	SimpleLayerTeams.ManialinkPage = GetSimpleTeamsLayer();
}

declare LayerPosition <=> UIManager.UILayerCreate();
if (C_UsePositionLayer) {
	Interface::SetLayerPosition(LayerPosition);
}

declare LayerBallCarrier <=> UIManager.UILayerCreate();
LayerBallCarrier.ManialinkPage = BallCarrierFrame();

declare LayerExtra <=> UIManager.UILayerCreate();

declare LayerMarkers <=> UIManager.UILayerCreate();
LayerMarkers.Type = CUILayer::EUILayerType::Markers;
LayerMarkers.ManialinkPage = GetMarkersLayer();
***

***StartMap***
***
XmlRpc.SendCallback("beginMap", "");

// UI
UIManager.ResetAll();
if (!C_UseDefaultScoreTable) {
	UIManager.UIAll.ScoreTableOnlyManialink = True;
}
UIManager.UIAll.AltMenuNoDefaultScores = True;
UIManager.UIAll.AltMenuNoCustomScores = True;
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
// Clan scores at the top
UIManager.UIAll.OverlayScoreSummary = True;
UIManager.UIAll.ScoreSummary_MatchPoints1 = -1;
UIManager.UIAll.ScoreSummary_MatchPoints2 = -1;
// Name plates
SM::SetupDefaultVisibility();

// Tabs
Tabs::Load();
declare CUILayer TabsLayer <=> Null;
if (C_UseDefaultScoreTable) {
	TabsLayer = Tabs::CreateTabPaneLayer(["TopTab"	=> "Buddies"], 5, -5, False);
} else {
	TabsLayer = Tabs::CreateTabPaneLayer(["TopTab"	=> "Buddies", "ScoresTab" => "Rankings"], 5, -5, False);
}
TabsLayer.Type = CUILayer::EUILayerType::AltMenu;
UIManager.UIAll.UILayers.add(TabsLayer);

// ScoresTable
if (!C_UseDefaultScoreTable) {
	ScoresTable::Load();
	ScoresTable::SetColumnsWidth(
		2.0,	// Rank
		1.5,	// Status indicator
		1.5,	// Profile picture
		25.0,	// Player name
		1.5,	// Spectate player
		1.5,	// Player profile
		0.0,	// Space before Custom1
		0.0,	// Space before Custom2
		0.0,	// Space before Custom3
		4.0,	// Space before Hits
		4.0		// Space before Score
	);
	ScoresTable::SetTableWidth(230.0);
	ScoresTable::SetTableFormat(2, 7);
	ScoresTable::SetColumnsName("", "", "", _("|Substantive|Hits"), _("Score"));
	ScoresTable::SetHeaderHeight(12.0);
	declare Text Clan1Color 		= Teams[0].ColorPrimary.X^" "^Teams[0].ColorPrimary.Y^" "^Teams[0].ColorPrimary.Z;
	declare Text Clan2Color 		= Teams[1].ColorPrimary.X^" "^Teams[1].ColorPrimary.Y^" "^Teams[1].ColorPrimary.Z;
	declare Text ScoresBGImg		= C_ImgBaseDir^"scoresBg.dds";
	declare Text ScoresBGImgLeft	= C_ImgBaseDir^"scoresBg_left.dds";
	declare Text ScoresBGImgRight	= C_ImgBaseDir^"scoresBg_right.dds";
	ScoresTable::SetTableBackgroundLeftRightImage(ScoresBGImg, ScoresBGImgLeft, ScoresBGImgRight, Clan1Color, Clan2Color, 94, 56, 66, <0.0, 60.0>, <260.0, 200.0>);
	ScoresTable::Build();
	ScoresTable::GetLayerScoresTable().Type = CUILayer::EUILayerType::Normal;
}

// Tops
Top::Load();
declare Real TopXPosition	= -75.0;
declare Real TopYPosition	= 37.0;
declare Real TopXOffset 	= 50.0;
declare Integer NbPlayersPerTop = 15;
Top::SetTopWidth(49.0);
Top::Create(T_Damage, "Top "^T_Damage, NbPlayersPerTop, <TopXPosition, TopYPosition>);
TopXPosition += TopXOffset;
Top::Create(T_Captures, "Top "^T_Captures, NbPlayersPerTop, <TopXPosition, TopYPosition>);
TopXPosition += TopXOffset;
Top::Create(T_Passes, "Top "^T_Passes, NbPlayersPerTop, <TopXPosition, TopYPosition>);
TopXPosition += TopXOffset;
Top::Create(T_Backstabber, "Flop "^T_Backstabber, NbPlayersPerTop, <TopXPosition, TopYPosition>);
declare Text TopBGImg = C_ImgBaseDir^"topsBg.dds";
Top::SetCommonBackgroundImage(TopBGImg,  <0.0, 102.0>, <260.0, 200.0>);
Top::SetLayerType(CUILayer::EUILayerType::AltMenu);

// Teams layer
if (C_UseTeamsLayer) {
	LayerTeams.IsVisible = True;
	UIManager.UIAll.UILayers.add(LayerTeams);
}
// Simple teams layer
if (C_UseSimpleTeamsLayer) {
	SimpleLayerTeams.IsVisible = True;
	UIManager.UIAll.UILayers.add(SimpleLayerTeams);
}

// Warmup
if (S_UseWarmUp) {
	WarmUp::Initialize(C_WarmUpDuration);
	WarmUp::Start();
}

UIManager.UIAll.SendNotice(
	_("New Match"), CUIConfig::ENoticeLevel::MatchInfo, 
	Null, CUIConfig::EAvatarVariant::Default, 
	CUIConfig::EUISound::StartMatch, 0);
// Ball carrier layer
LayerBallCarrier.IsVisible = True;
UIManager.UIAll.UILayers.add(LayerBallCarrier);
// Extra information layer
LayerExtra.IsVisible = True;
UIManager.UIAll.UILayers.add(LayerExtra);
// Markers layer
LayerMarkers.IsVisible = True;
UIManager.UIAll.UILayers.add(LayerMarkers);

// Hide map warnings to suppress the "Pole captured by X" message
UIManager.UIAll.NoticesFilter_HideMapWarning = True;

// Auto team balance
if (S_AutoTeamBalance) {
	Mode::AutoTeamBalance();
	SM::UnspawnAllPlayers();
}

// Prepare match
if (!C_UseDefaultScoreTable) {
	ScoresTable::StartMatch();
}
Score::MatchBegin();
Top::ResetAll();
Victory::MatchBegin();
BalancedWeapons::MatchBegin();
if (C_UseAirshot) {
	Airshot::MatchBegin();
}

foreach (Player in Players) {
	declare Scores_MapCaptures for Player = 0;
	declare Scores_MapPasses for Player = 0;
	declare Scores_MapHits for Player = 0;
	declare Scores_MapBackstabber for Player = 0;
	
	Scores_MapCaptures = 0;
	Scores_MapPasses = 0;
	Scores_MapHits = 0;
	Scores_MapBackstabber = 0;
}

ClanScores[1] = 0;
ClanScores[2] = 0;
G_Overtime = False;

// Prepare map
G_ClanSpawnIDs.clear();
G_ClanPoleIDs.clear();
G_BallPoleId = NullId;
foreach (Base in Bases) {
	Base.IsActive = True;
	Base.Clan = 0;
}
foreach (Index => Spawn in BlockSpawns) {
	G_ClanSpawnIDs[Spawn.Order] = Spawn.Id;
}
foreach (Index => Pole in BlockPoles) {
	switch (Pole.Order) {
		case 3: {
			// Ball spawn
			G_BallHomePosition = GetFixedPosition(Pole);
			G_BallPoleId = Pole.Id;
			Pole.Gauge.ValueReal = 1.0;
			Pole.Captured = True;
		}
		default: {
			G_ClanPoleIDs[3-Pole.Order] = Pole.Id;
			Pole.Gauge.Max = C_NeededCaptureTime;
		}
	}
}

// Cache settings
Cache_S_FriendlyFire = S_FriendlyFire;
Cache_S_LaserBattle = S_LaserBattle;
---Rules---
***

***StartRound***
***
XmlRpc.SendCallback("beginRound", GetRankings());

Score::RoundBegin();
Victory::RoundBegin();
BalancedWeapons::RoundBegin();
if (C_UseAirshot) {
	Airshot::RoundBegin();
}

// UI
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
if (G_Overtime) {
	if (C_ShowOvertimeExtra) {
		LayerExtra.ManialinkPage = """<label posn="0 66 9999" halign="center" scale="0.8" textprefix="$f00" text="{{{T_Overtime}}}!"/>""";
	} else {
		LayerExtra.ManialinkPage = "";
	}
} else {
	LayerExtra.ManialinkPage = "";
	UIManager.UIAll.SendNotice(
		"", CUIConfig::ENoticeLevel::MatchInfo,
		Null, CUIConfig::EAvatarVariant::Default,
		CUIConfig::EUISound::StartRound, 0);
}

// Initialize values
if (!G_Overtime) {
	AssignSpawnPoleClans();
}
G_BallCarrierId = NullId;
G_BallDropPosition = G_BallHomePosition;
G_ExtraTimeStart = 0;
G_BallArmorRegTime = 0;
G_ResetTimeMessageStatus = 0;
UpdateBaseClans();

// Clublinks
Clublink::DefineTeamsAuto();

// Set bots
SetNbFakePlayers(S_NbBotsBlue, S_NbBotsRed);

// Set round times
StartTime = Now + C_RespawnTime + 1000;
if (G_Overtime) {
	EndTime = StartTime + S_OvertimeLimit * 1000;
} else {
	EndTime = StartTime + S_TimeLimit * 1000;
}
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
***

***OnNewPlayer***
***
// Init player
InitPlayer(Player);

// Prepare UI for the new player
declare UI <=> UIManager.GetUI(Player);
if (UI != Null) {
	UI.UILayers.clear();
	UI.UILayers.add(LayerPosition);
	UI.UILayers.add(LayerMarkers);
	
	// Gauge ratio
	UI.GaugeRatio = -1.0;
}
***

***OnNewSpectator***
***
// Init spectator
InitPlayer(Spectator);

// Prepare UI for the new spectator
declare UI <=> UIManager.GetUI(Spectator);
if (UI != Null) {
	UI.UILayers.clear();

	// Gauge ratio
	UI.GaugeRatio = -1.0;
	
	// Spawn queue
	declare LastSpawnTime for Spectator = -1;
	if (LastSpawnTime >= 0) {
		LastSpawnTime = -1;
		if (UI.StatusMessage == T_WaitForSpawn) {
			UI.StatusMessage = "";
		}
	}
}
***

***PlayLoop***
***
// Handle afk players
if (C_ManageAFKPlayers) {
	AFK::ManageAFKPlayers();
}

// Library updates
if (C_UseAchievements) {
	Achievements::OnLoop();
}
if (C_UseAirshot) {
	Airshot::Update();
}
if (C_ManageAFKPlayers && G_LastAfkHandling + 10000 < Now) {
	G_LastAfkHandling = Now;
	AFK::ManageAFKPlayers();
}

// Gameplay version
if (S_UseBeta2Gameplay && GameplayVersion != 1) {
	GameplayVersion = 1;
} else {
	if (!S_UseBeta2Gameplay && GameplayVersion != 0) {
		GameplayVersion = 0;
	}
}

// Update playing players
G_PlayingPlayerIDs.clear();
foreach (Player in Players) {
	declare LastSpawnTime for Player = -1;
	if (LastSpawnTime >= 0) {
		G_PlayingPlayerIDs.add(Player.Id);
	}
}

// Update waiting players
foreach (PlayerID in G_WaitingPlayerIDs) {
	if (!Players.existskey(PlayerID)) {
		declare Temp = G_WaitingPlayerIDs.remove(PlayerID);
	}
}

// Check for changed settings
declare UpdateRules = False;
if (Cache_S_FriendlyFire != S_FriendlyFire) {
	// FriendlyFire changed
	if (S_FriendlyFire) {
		UIManager.UIAll.SendChat(_("$<$f80Friendly Fire$> is now $<$0f0activated$>! (Pay attention to not damage your team mates!)"));
	} else {
		UIManager.UIAll.SendChat(_("$<$f80Friendly Fire$> is now $<$f11deactivated$>!"));
	}
	Cache_S_FriendlyFire = S_FriendlyFire;
	UpdateRules = True;
}
if (Cache_S_LaserBattle != S_LaserBattle) {
	// InstaGib changed
	if (S_LaserBattle) {
		UIManager.UIAll.SendChat(_("$<$f80LaserBattle$> is now $<$0f0activated$>! (Players spawn with lasers! Hits cause still 1 damage.)"));
	} else {
		UIManager.UIAll.SendChat(_("$<$f80LaserBattle$> is now $<$f11deactivated$>!"));
	}
	Cache_S_LaserBattle = S_LaserBattle;
	UpdateRules = True;
}
if (UpdateRules) {
	---Rules---
}

if (G_BallCarrierId != NullId) {
	if (!Players.existskey(G_BallCarrierId)) {
		// Ball carrier left the game
		DropBall();
	} else {
		// Track ball position
		G_LastBallPosition = Players[G_BallCarrierId].Position;
	}
} else {
	// Check if the dropped ball resets
	if (G_BallDropPosition != G_BallHomePosition && GetRmDrpdBallTime() <= 0) {
		ResetBall();
	}
}

// Perform actions for each player
foreach (Player in Players) {
	// Highlighting
	Player.IsHighlighted = C_OnlyHighlightBallCarrier && G_BallCarrierId != NullId && G_BallCarrierId == Player.Id || !C_OnlyHighlightBallCarrier && Player.Armor > 0;

	// Actions
	switch (Player.SpawnStatus) {
		case CSmPlayer::ESpawnStatus::NotSpawned: {
			// Player not spawned -> Spawn him!
			if (!Player.RequestsSpectate) {
				MySpawnPlayer(Player);
			}
		}
		case CSmPlayer::ESpawnStatus::Spawned: {
			// Check for respawn requests
			if (Player.CurrentClan != Player.RequestedClan || Player.RequestsSpectate) {
				DropBall(Player.Id);
				UnspawnPlayer(Player);
			} else {
				if (G_BallCarrierId != NullId && G_BallCarrierId == Player.Id) {
					// Ball carrier! Regenerate armor
					Player.ArmorReplenishGain = C_BallCarrierArmorReplenishGain;
					// Use alternate ball weapon visual?
					if (C_UseAlternateBallWeaponVisual) {
						Player.UseAlternateWeaponVisual = True;
					}
				} else {
					if (G_BallCarrierId == NullId) {
						// Check if the player picks up the ball
						if (Player.Armor >= 100) {
							if (MathLib::Distance(Player.Position, G_BallDropPosition) <= C_BallPickUpDistance) {
								// Player picks up the ball
								PickUpBall(Player.Id);
							}
						}
					}
					// Reduce armor to even values if the player has partly regenerated armor
					Player.ArmorReplenishGain = 0;
					if (Player.Armor > 100 && Player.Armor < 200) {
						Player.Armor = 100;
					}
					// Disable alternate ball weapon visual
					if (Player.UseAlternateWeaponVisual) {
						Player.UseAlternateWeaponVisual = False;
					}
				}
			}
		}
	}
}

// Handle pending events
foreach (Event in PendingEvents) {
	if (C_UseAchievements) {
		Achievements::OnEvent(Event);
	}
	switch (Event.Type) {
		case CSmModeEvent::EType::OnArmorEmpty: {
			if (Event.Victim.Id == G_BallCarrierId) {
				// Ball carrier died -> Drop the ball
				DropBall(Event.Victim.Id);
			}
			if (Event.Shooter != Null && !Event.Shooter.IsFakePlayer && !Event.Victim.IsFakePlayer) {
				BalancedWeapons::OnOut(Event.Shooter, Event.Victim);
				XmlRpc.SendCallback("playerKill", "Victim:"^Event.Victim.Login^";Shooter:"^Event.Shooter.Login);
			}
			if (!Event.Victim.IsFakePlayer) {
				XmlRpc.SendCallback("playerDeath", Event.Victim.Login);
			}
			PassOn(Event);
		}
		case CSmModeEvent::EType::OnHit: {
			if (Event.Shooter == Null || Event.Victim == Null) {
				// Discard buggy event
				Discard(Event);
			} else {
				if (Event.Shooter == Event.Victim) {
					if (C_NucleusSelfDamage && (Event.Shooter.Id != G_BallCarrierId) && Event.WeaponNum == This.GetWeaponIndex(CSmMode::EWeapon::Nucleus)+1) {
						// Allow nucleus self damage
						declare Points = -1;
						Event.ShooterPoints = Points;
						// Decrease scores
						if (!Event.Shooter.IsFakePlayer) {
							declare Scores_MapBackstabber for Event.Shooter = 0;
							Scores_MapBackstabber -= Points;
							if (C_UseDefaultScoreTable) {
								Score::AddPoints(Event.Shooter, Points);
							} else {
								if (C_DecrScoreOnFriendHit) {
									if (Event.Shooter.Score != Null) {
										Event.Shooter.Score.Points += Points;
									}
								}
							}
						}
						PassOn(Event);
					} else {
						// Discard self damage
						Discard(Event);
					}
				} else {
					if (C_UseAirshot) {
						Airshot::OnHit(Event.Shooter, Event.Victim);
					}
					if (Event.Shooter.Id == G_BallCarrierId) {
						// Ball carrier hit someone -> Pass the ball
						PassBall(Event.Shooter.Id, Event.Victim.Id);
						Discard(Event);
					} else {
						if (Event.Shooter.CurrentClan == Event.Victim.CurrentClan) {
							if (S_FriendlyFire) {
								// Friendly fire hits
								declare Points = -1;
								if (Event.Victim.Id == G_BallCarrierId) {
									Points *= 2;
								}
								Event.ShooterPoints = Points;
								// Decrease scores
								if (!Event.Shooter.IsFakePlayer) {
									declare Scores_MapBackstabber for Event.Shooter = 0;
									Scores_MapBackstabber -= Points;
									if (C_UseDefaultScoreTable) {
										Score::AddPoints(Event.Shooter, Points);
									} else {
										if (C_DecrScoreOnFriendHit) {
											if (Event.Shooter.Score != Null) {
												Event.Shooter.Score.Points += Points;
											}
										}
									}
								}
								// Kill victim if he hasn't full armor
								if (Event.Victim.Armor < 200) {
									Event.Damage = Event.Victim.Armor;
								}
								// Show team hit warning
								if (C_NbTeamHitMessage != 0) {
									declare UI <=> UIManager.GetUI(Event.Shooter);
									if (UI != Null) {
										declare NbTeamHitMessage for UI = 0;
										if (C_NbTeamHitMessage < 0 || NbTeamHitMessage < C_NbTeamHitMessage) {
											UI.StatusMessage = T_TeamHitMessage;
											NbTeamHitMessage += 1;
											declare LastStatusMessage for UI = 0;
											LastStatusMessage = Now;
										}
									}
								}
								PassOn(Event);
							} else {
								// Discard team hits
								Discard(Event);
							}
						} else {
							// Calculate points for the hit
							declare Points = 1;
							if (Event.Victim.Id == G_BallCarrierId) {
								Points *= 2;
							}
							Event.ShooterPoints = Points;
							if (!Event.Shooter.IsFakePlayer) {
								declare Scores_MapHits for Event.Shooter = 0;
								Scores_MapHits += Points;
								if (C_UseDefaultScoreTable) {
									Score::AddPoints(Event.Shooter, Points);
								} else {
									if (Event.Shooter.Score != Null) {
										Event.Shooter.Score.Points += Points;
									}
									Score::AddPoints(Event.Shooter, Points);
								}
							}
							// Kill victim if he hasn't full armor
							if (Event.Victim.Armor < 200) {
								Event.Damage = Event.Victim.Armor;
							}
							if (!Event.Shooter.IsFakePlayer && !Event.Victim.IsFakePlayer) {
								XmlRpc.SendCallback("playerHit", "Victim:"^Event.Victim.Login^";Shooter:"^Event.Shooter.Login^";"^Points);
							}
							PassOn(Event);
						}
					}
					if (!Event.Shooter.IsFakePlayer && C_UseAirshot && Airshot::MustShowMessage(Event.Shooter)) {
						declare UI <=> UIManager.GetUI(Event.Shooter);
						if (UI != Null) {
							UI.SendNotice(
								Airshot::Message(Event.Shooter), CUIConfig::ENoticeLevel::Default,
								Null, CUIConfig::EAvatarVariant::Default,
								CUIConfig::EUISound::Bonus, 0);
						}
					}
				}
			}
		}
		case CSmModeEvent::EType::OnPlayerRequestRespawn: {
			if (Event.Player.Id == G_BallCarrierId) {
				// Ball carrier requested respawn -> Drop the ball
				DropBall(Event.Player.Id);
			}
			MySpawnPlayer(Event.Player);
			if (!Event.Player.IsFakePlayer) {
				XmlRpc.SendCallback("playerRespawn", Event.Player.Login);
			}
			Discard(Event);
		}
		case CSmModeEvent::EType::OnCapture: {
			// Captured!
			if (G_BallCarrierId != NullId) {
				// Announce winner etc.
				Victory::SetRoundWinnerIfNoWinner(Players[G_BallCarrierId].CurrentClan);
				UIManager.UIAll.BigMessage = "";
				UIManager.UIAll.SendNotice(
					TextLib::Compose(_("$<%1$> scores for $<%2$>!"), Players[G_BallCarrierId].Name, Teams[Players[G_BallCarrierId].CurrentClan-1].ColorizedName), CUIConfig::ENoticeLevel::MatchInfo,
					Null, CUIConfig::EAvatarVariant::Default,
					CUIConfig::EUISound::Capture, 0);
				// Grant points for capturing
				if (!Players[G_BallCarrierId].IsFakePlayer) {
					declare Scores_MapCaptures for Players[G_BallCarrierId] = 0;
					Scores_MapCaptures += 1;
					if (C_UseDefaultScoreTable) {
						Score::AddPoints(Players[G_BallCarrierId], 5);
					} else {
						if (Players[G_BallCarrierId].Score != Null) {
							Players[G_BallCarrierId].Score.Points += 5;
						}
					}
				}
				if (!Players[G_BallCarrierId].IsFakePlayer) {
					XmlRpc.SendCallback("poleCapture", Players[G_BallCarrierId].Login);
				}
			}
			PassOn(Event);
		}
		case CSmModeEvent::EType::OnNearMiss: {
			// Near miss
			if (!Event.Shooter.IsFakePlayer && C_NearMissDist >= 0 && Event.MissDist <= C_NearMissDist) {
				declare UI <=> UIManager.GetUI(Event.Shooter);
				if (UI != Null) {
					UI.StatusMessage = GetNearMissMessage(Event);
					declare LastStatusMessage for UI = 0;
					LastStatusMessage = Now;
				}
			}
			PassOn(Event);
		}
		default: {
			PassOn(Event);
		}
	}
}

// Update scores
UpdatePlayersScores();
Top::Loop();

// Check for captures
foreach (Pole in BlockPoles) {
	if (G_ClanPoleIDs.exists(Pole.Id)) {
		if (Victory::NoRoundWinner()) {
			Pole.Gauge.Speed = -C_NeededCaptureTime;
		}
		declare BallAtPole = False;
		if (G_BallCarrierId != NullId) {
			foreach (PlayerId in Pole.Sector.PlayersIds) {
				if (PlayerId == G_BallCarrierId && Pole.Id == G_ClanPoleIDs[Players[PlayerId].CurrentClan]) {
					if (G_Overtime) {
						Pole.Gauge.ValueReal = 1.0;
						Pole.Gauge.Speed = C_NeededCaptureTime;
					} else {
						Pole.Gauge.Speed = 1;
					}
					// Gauge ratio
					declare UI <=> UIManager.GetUI(Players[PlayerId]);
					if (UI != Null) {
						UI.GaugeClan = Players[PlayerId].CurrentClan;
						UI.GaugeRatio = Pole.Gauge.ValueReal;
					}
					BallAtPole = True;
					break;
				}
			}
		}
		if (!BallAtPole) {
			// Prevent weird bug causing the pole stay fully captured without an OnCapture event
			if (!Pole.Captured && Pole.Gauge.ValueReal >= 1.0) {
				Pole.Gauge.ValueReal = 0.0;
			}
		}
	}
}

// UI updates
if (G_LastUIUpdate + C_UITickInterval < Now) {
	G_LastUIUpdate = Now;
	
	// Gauge ratio
	foreach (Player in Players) {
		if (G_BallCarrierId == NullId || G_BallCarrierId != Player.Id || BlockPoles[G_ClanPoleIDs[3-Player.CurrentClan]].Gauge.ValueReal <= 0) {
			declare UI <=> UIManager.GetUI(Player);
			if (UI != Null) {
				UI.GaugeRatio = -1.0;
			}
		}
	}
	
	// Clear big messages
	if (G_LastBigMessage > 0 && G_LastBigMessage + 5000 < Now) {
		UIManager.UIAll.BigMessage = "";
		G_LastBigMessage = 0;
	}
	
	// Clear status messages
	if (G_LastStatusMessage > 0 && G_LastStatusMessage + 5000 < Now) {
		UIManager.UIAll.StatusMessage = "";
		G_LastStatusMessage = 0;
	}
	
	// Clan scores at the top
	UpdateClanScoresSummary();
	
	// Build new simple teams layer update (to update team color)
	if (C_UseSimpleTeamsLayer) {
		SimpleLayerTeams.ManialinkPage = GetSimpleTeamsLayer();
	}
	
	// Update players UI
	foreach (Player in Players) {
		declare UI <=> UIManager.GetUI(Player);
		if (UI != Null) {
			// Update layers
			UpdatePositionLayer(Player);
			LayerBallCarrier.ManialinkPage = BallCarrierFrame();
			UpdateSimpleTeamsLayer(Player);
			
			// Update crosshair extension
			if (G_BallCarrierId != NullId && G_BallCarrierId == Player.Id) {
				UI.ManialinkPage = """<label posn="0 7" halign="center" scale="2" text="{{{Teams[Player.CurrentClan-1].ColorText}}}〝     〞" style="TextCardSmallScores1"/><label posn="0 -8" halign="center" scale="1" textprefix="{{{Teams[Player.CurrentClan-1].ColorText}}}$n$o" text="{{{_("shoot to pass")}}}" style="TextCardSmallScores2"/>""";
			} else {
				UI.ManialinkPage = "";
			}
			
			// Markers layer update
			UpdateMarkersLayer(Player);
			
			// Clear player status message
			declare LastStatusMessage for UI = 0;
			if ((LastStatusMessage > 0 && LastStatusMessage + 4500 < Now) || UI.StatusMessage == T_WaitForSpawn) {
				UI.StatusMessage = "";
				LastStatusMessage = 0;
			}
		}
	}
	
	// Update spectators UI
	foreach (Spectator in Spectators) {
		declare UI <=> UIManager.GetUI(Spectator);
		if (UI != Null) {
			// Update layers
			LayerBallCarrier.ManialinkPage = BallCarrierFrame();
			UpdateSimpleTeamsLayer(Spectator);
			
			// Update crosshair extension
			UI.ManialinkPage = "";
			
			// Markers layer update
			UpdateMarkersLayer(Spectator);
		}
	}
}

// Check round end conditions
if (Now >= EndTime) {
	// Time is up
	if (G_BallCarrierId == NullId) {
		// Ball is dropped
		declare EndRound = False;
		if (C_EndRoundOnDrop) {
			// On drop variant - end round
			EndRound = True;
		} else {
			// On reset variant
			if (G_BallHomePosition == G_BallDropPosition) {
				// @Home - End round
				EndRound = True;
			}
		}
		if (EndRound) {
			// Perform round end and start overtime
			Victory::SetRoundDrawIfNoWinner();
			MB_StopRound = True;
			G_Overtime = !G_Overtime;
		}
	} else {
		// Ball isn't dropped
		if (G_Overtime && G_BallCarrierId != NullId && Players.existskey(G_BallCarrierId)) {
			// Win by holding the ball long enough
			Victory::SetRoundWinnerIfNoWinner(Players[G_BallCarrierId].CurrentClan);
		} else {
			// Keep going
			if (EndTime != -1) {
				EndTime = -1;
				G_ExtraTimeStart = Now - 2000;
			}
			StartTime = G_ExtraTimeStart;
		}
	}
	
	// Messages for the decreasing reset time
	if (!G_Overtime && C_DecResetTimeToEndRound && !MB_StopRound) {
		switch (G_ResetTimeMessageStatus) {
			case 0: {
				declare Message = _("The time to reset the ball starts decreasing...");
				UIManager.UIAll.SendNotice (
					Message, CUIConfig::ENoticeLevel::PlayerInfo,
					Null, CUIConfig::EAvatarVariant::Default,
					CUIConfig::EUISound::Silence, 0);
				G_ResetTimeMessageStatus = 1;
			}
			case 1: {
				if (GetRmDrpdBallTime() <= 0) {
					declare Message = _("The ball resets instantly now!");
					UIManager.UIAll.SendNotice (
						Message, CUIConfig::ENoticeLevel::PlayerInfo,
						Null, CUIConfig::EAvatarVariant::Default,
						CUIConfig::EUISound::Silence, 0);
					G_ResetTimeMessageStatus = 2;
				}
			}
		}
	}
}
if (!MB_StopRound && !Victory::NoRoundWinner()) {
	// Round winner found
	MB_StopRound = True;
	if (G_Overtime) {
		G_Overtime = False;
	}
}
***

***EndRound***
***
XmlRpc.SendCallback("endRound", GetRankings());

UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
if (G_Overtime) {
	UIManager.UIAll.SendNotice(
		"", CUIConfig::ENoticeLevel::MatchInfo,
		Null, CUIConfig::EAvatarVariant::Default,
		CUIConfig::EUISound::EndRound, 0);
}

StartTime = -1;
EndTime = -1;
SM::UnspawnAllPlayers();
MB_Sleep(3000);

if (G_Overtime) {
	if (!MB_StopMap && !MatchEndRequested) {
		UIManager.UIAll.SendNotice(
			TextLib::Compose("$f00%1!", T_Overtime), CUIConfig::ENoticeLevel::PlayerInfo,
			Null, CUIConfig::EAvatarVariant::Default,
			CUIConfig::EUISound::StartRound, 0);
		UIManager.UIAll.BigMessage = TextLib::Compose("$f00%1!", T_Overtime);
		UIManager.UIAll.StatusMessage = TextLib::Compose(_("Hold the %1 for %2 seconds or capture instantly!"), T_Ball, TextLib::ToText(S_OvertimeLimit));
		G_LastBigMessage = Now;
		G_LastStatusMessage = Now;
		
		MB_Sleep(3000);
	}
} else {
	// Evaluate round
	declare Message = _("Round Draw");
	if (!Victory::IsRoundDraw()) {
		for (Index, 1, 2) {
			if (Victory::IsRoundWinner(Index)) {
				// Team 'Index' wins the round
				ClanScores[Index] += 1;
				Message = TextLib::Compose(_("%1 wins the round!"), Teams[Index-1].ColorizedName);
				UpdateClanScoresSummary();
				break;
			}
		}
	}
	UIManager.UIAll.BigMessage = "";
	UIManager.UIAll.SendNotice(
		Message, CUIConfig::ENoticeLevel::MatchInfo,
		Null, CUIConfig::EAvatarVariant::Default,
		CUIConfig::EUISound::EndRound, 0);
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
	
	// Check match end conditions
	Victory::SetMatchWinnerFromScore(S_RoundsToWin, S_RoundGapToWin, S_RoundsLimit);
	if (!Victory::NoMatchWinner()) {
		// Match winner found
		MB_StopMap = True;
	}
	
	// Wait to let the players take a breath
	MB_Sleep(4000);
	
	if (C_UseDefaultScoreTable) {
		Score::RoundEnd();
	}
}
Victory::RoundEnd();
BalancedWeapons::RoundEnd();
if (C_UseAirshot) {
	Airshot::RoundEnd();
}
***

***EndMap***
***
XmlRpc.SendCallback("endMap", GetRankings());

Score::MatchEnd();
Victory::MatchEnd();
BalancedWeapons::MatchEnd();
if (C_UseAirshot) {
	Airshot::MatchEnd();
}

// UI
UIManager.UIAll.BigMessage = "";
UIManager.UIAll.StatusMessage = "";
UIManager.UIAll.Hud3dMarkers = "";
UIManager.UIAll.ManialinkPage = "";
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;

// Hide useless layers
if (C_HideStuffAtMapEnd) {
	// Custom layers
	LayerPosition.IsVisible = False;
	LayerBallCarrier.IsVisible = False;
	LayerTeams.IsVisible = False;
	SimpleLayerTeams.IsVisible = False;
}

// Announce victorious clan
declare Message = _("Match Draw");
if (!Victory::IsMatchDraw()) {
	for (Index, 1, 2) {
		if (Victory::IsMatchWinner(Index)) {
			// Team 'Index' wins the match
			Message = TextLib::Compose(_("%1 wins the match!"), Teams[Index-1].ColorizedName);
			break;
		}
	}
}
UIManager.UIAll.SendNotice(
	Message, CUIConfig::ENoticeLevel::MatchInfo, 
	Null, CUIConfig::EAvatarVariant::Default, 
	CUIConfig::EUISound::EndMatch, 0);

MB_Sleep(4000);

// Save spawned players for the next map
G_SpawnedPlayerIDs.clear();
foreach (Player in Players) {
	declare LastSpawnTime for Player = -1;
	if (LastSpawnTime >= 0) {
		G_SpawnedPlayerIDs.add(Player.Id);
	}
}
***

***EndServer***
***
SpawnScreen::DestroyRules();
UIManager.UILayerDestroy(LayerTeams);
UIManager.UILayerDestroy(SimpleLayerTeams);
UIManager.UILayerDestroy(LayerPosition);
UIManager.UILayerDestroy(LayerBallCarrier);

if (!C_UseDefaultScoreTable) {
	ScoresTable::Unload();
}
Color::Unload();
***

/*****************************************************
	FUNCTIONS
*****************************************************/

// Set bot power
Void SetBotPower(CSmPlayer _Player) {
	if (_Player.IsFakePlayer) {
		// Ammunition
		_Player.AmmoGain = S_BotPower;
		
		// Armor
		declare ArmorMax = MathLib::NearestInteger(S_BotPower * 100);
		if (ArmorMax > 1000) {
			ArmorMax = 1000;
		} else {
			if (ArmorMax < 100) {
				ArmorMax = 100;
			}
		}
		_Player.ArmorMax = ArmorMax;
		
		// Agressivity
		_Player.BotAgressivity = S_BotPower;
	}
}

// Initialize player
Void InitPlayer(CSmPlayer _Player) {
	declare Scores_Hits for _Player = 0;
	
	Scores_Hits = 0;
	
	declare UI <=> UIManager.GetUI(_Player);
	if (UI != Null) {
		Tabs::UseTabs(UI, "ScoresTab");
	}
}

// Updates score of player
Void UpdatePlayerScores(CSmPlayer _Player) {
	if (_Player.Score != Null) {
		declare Scores_MapCaptures for _Player = 0;
		declare Scores_MapPasses for _Player = 0;
		declare Scores_MapHits for _Player = 0;
		declare Scores_MapBackstabber for _Player = 0;
		
		Top::SetRecord(_Player, T_Captures, ""^Scores_MapCaptures, -Scores_MapCaptures);
		Top::SetRecord(_Player, T_Passes, ""^Scores_MapPasses, -Scores_MapPasses);
		Top::SetRecord(_Player, T_Damage, ""^Scores_MapHits, -Scores_MapHits);
		Top::SetRecord(_Player, T_Backstabber, ""^Scores_MapBackstabber, -Scores_MapBackstabber);
	}
}

Void UpdatePlayersScores() {
	foreach (Player in Players) {
		UpdatePlayerScores(Player);
	}
}

// Spawn player
Void MySpawnPlayer(CSmPlayer _Player) {
	UnspawnPlayer(_Player);
	
	// Check if the player is allowed to spawn
	declare SpawnAllowed = False;
	declare LastSpawnTime for _Player = -1;
	if (S_MaxPlayerCount <= 0 || LastSpawnTime >= 0 || G_SpawnedPlayerIDs.exists(_Player.Id)) {
		// Player has already been spawned
		SpawnAllowed = True;
	} else {
		if (G_PlayingPlayerIDs.count < S_MaxPlayerCount && G_WaitingPlayerIDs.count > 0 && G_WaitingPlayerIDs[0] == _Player.Id) {
			// Player is the longest waiting one
			SpawnAllowed = True;
		}
	}
	
	if (SpawnAllowed) {
		// Set bot power
		SetBotPower(_Player);
		
		// Set player weapon
		BalancedWeapons::SetPlayerWeapon(_Player, True);
		if (S_LaserBattle) {
			This.SetPlayerWeapon(_Player, CSmMode::EWeapon::Laser, False);
			_Player.AmmoGain += C_InstaGibExtraAmmoGain;
			_Player.AmmoPower = C_InstaGibAmmoPower;
		} else {
			This.SetPlayerWeapon(_Player, CSmMode::EWeapon::Rocket, True);
			_Player.AmmoGain += C_NormalExtraAmmoGain;
			_Player.AmmoPower = C_NormalAmmoPower;
		}
		
		// Calculate spawn time
		declare SpawnTime = StartTime;
		if (Now > SpawnTime) {
			SpawnTime = Now + C_RespawnTime;
		}
		LastSpawnTime = SpawnTime;
		
		if (!G_PlayingPlayerIDs.exists(_Player.Id)) {
			G_PlayingPlayerIDs.add(_Player.Id);
		}
		SM::SpawnPlayer(_Player, _Player.RequestedClan, BlockSpawns[G_ClanSpawnIDs[_Player.RequestedClan]], SpawnTime);
		if (C_LogEnabled) MB_Log("""Spawning player: {{{_Player.Login}}}""");
		
		// Remove player from waiting queue
		if (G_WaitingPlayerIDs.exists(_Player.Id)) {
			declare Temp = G_WaitingPlayerIDs.remove(_Player.Id);
		}
	} else {
		// Add player to waiting queue
		if (!G_WaitingPlayerIDs.exists(_Player.Id)) {
			G_WaitingPlayerIDs.add(_Player.Id);
		}
		
		// Display waiting message
		declare UI <=> UIManager.GetUI(_Player);
		if (UI != Null) {
			if (UI.StatusMessage == "") {
				UI.StatusMessage = T_WaitForSpawn;
			}
		}
	}
}

// Get fixed position of poles
Vec3 GetFixedPosition(CSmBlockPole _BlockPole) {
	declare Position = _BlockPole.Position;
	
	declare XCord = MathLib::NearestInteger(Position.X / 4);
	declare ZCord = MathLib::NearestInteger(Position.Z / 4);

	if (Position.X != XCord * 4.0 || Position.Z != ZCord * 4.0) {
		Position -= _BlockPole.DirFront;
	}
	
	return Position + <0.0, 0.4, 0.0>;
}

// Set clans of spawns and poles at start of map and each round (changing sides)
Void AssignSpawnPoleClans() {
	if (C_LogEnabled) MB_Log("AssignSpawnPoleClans");
	
	// SPAWNS
	// Change sides
	declare FirstSpawns = G_ClanSpawnIDs[1];
	G_ClanSpawnIDs[1] = G_ClanSpawnIDs[2];
	G_ClanSpawnIDs[2] = FirstSpawns;
	// Assign clans
	foreach (Order => Id in G_ClanSpawnIDs) {
		switch (BlockSpawns[Id].Base.Clan) {
			case 0: {
				if (Order != 3) {
					BlockSpawns[Id].Base.Clan = Order;
				}
			}
			default: {
				BlockSpawns[Id].Base.Clan = 3-BlockSpawns[Id].Base.Clan;
			}
		}
	}
	
	// POLES
	// Edit ball pole
	if (G_BallPoleId != NullId && BlockPoles.existskey(G_BallPoleId)) {
		BlockPoles[G_BallPoleId].Base.Clan = 0;
		BlockPoles[G_BallPoleId].Gauge.Clan = 0;
	}
	
	// Change sides
	declare FirstPole = G_ClanPoleIDs[1];
	G_ClanPoleIDs[1] = G_ClanPoleIDs[2];
	G_ClanPoleIDs[2] = FirstPole;
	// Prepare poles stuff
	G_PoleMarkers = "";
	foreach (Order => Id in G_ClanPoleIDs) {
		// Initialize values
		BlockPoles[Id].Captured = False;
		BlockPoles[Id].Gauge.ValueReal = 0.0;
		BlockPoles[Id].Gauge.Speed = 0;
		
		// Assign clans
		switch (BlockPoles[Id].Gauge.Clan) {
			case 0: {
				if (Order != 3) {
					BlockPoles[Id].Gauge.Clan = Order;
					BlockPoles[Id].Base.Clan = BlockPoles[Id].Gauge.Clan;
				}
			}
			default: {
				BlockPoles[Id].Gauge.Clan = 3-BlockPoles[Id].Gauge.Clan;
				BlockPoles[Id].Base.Clan = BlockPoles[Id].Gauge.Clan;
			}
		}
		
		// Prepare markers
		declare PolePosi = GetFixedPosition(BlockPoles[Id]);
		G_PoleMarkers ^= """<marker pos="{{{PolePosi[0]}}} {{{PolePosi[1]+7.5}}} {{{PolePosi[2]}}}" manialinkframeid="Frame_Pole{{{BlockPoles[Id].Gauge.Clan}}}Marker"/>""";
	}
}

// Update clans of bases
Void UpdateBaseClans() {
	if (G_BallCarrierId == NullId) {
		// Ball dropped - Reset base clan of the ball pole
		if (G_BallPoleId != NullId && BlockPoles.existskey(G_BallPoleId)) {
			BlockPoles[G_BallPoleId].Base.Clan = 0;
			BlockPoles[G_BallPoleId].Gauge.Clan = 0;
		}
	} else {
		// A clan carries the ball - Set carrying clan to ball pole
		if (Players.existskey(G_BallCarrierId) && G_BallPoleId != NullId && BlockPoles.existskey(G_BallPoleId)) {
			BlockPoles[G_BallPoleId].Base.Clan = Players[G_BallCarrierId].CurrentClan;
			BlockPoles[G_BallPoleId].Gauge.Clan = Players[G_BallCarrierId].CurrentClan;
		}
		// Bases screw things up on some maps - Perform fix if needed
		if (G_ClanPoleIDs.existskey(1) && G_ClanPoleIDs.existskey(2) && G_ClanPoleIDs[1] != NullId && G_ClanPoleIDs[2] != NullId) {
			if (BlockPoles.existskey(G_ClanPoleIDs[1]) && BlockPoles.existskey(G_ClanPoleIDs[2]) && BlockPoles[G_ClanPoleIDs[1]].Base == BlockPoles[G_ClanPoleIDs[2]].Base) {
				// Poles of the teams share the same base -.-
				// Change the clan of the base to the clan currently carrying the ball
				BlockPoles[G_ClanPoleIDs[Players[G_BallCarrierId].CurrentClan]].Base.Clan = Players[G_BallCarrierId].CurrentClan;
			}
		}
	}
}

// Player picks up the ball
Void PickUpBall(Ident _PlayerId) {
	// Perform several checks if picking up is allowed right now because of weird bugs of the game itself
	if (G_BallCarrierId == NullId && Players.existskey(_PlayerId) && (Now < EndTime || G_BallDropPosition != G_BallHomePosition) && Now >= StartTime && Players[_PlayerId].Armor > 0 && (C_BotsCanHaveBall || !Players[_PlayerId].IsFakePlayer)) {
		G_BallCarrierId = _PlayerId;
		UIManager.UIAll.BigMessage = TextLib::Compose(_("$<%1$> has the $<%2%3$>!"), Players[_PlayerId].Name, Teams[Players[_PlayerId].CurrentClan-1].ColorText, T_Ball);
		G_LastBigMessage = Now;
		if (C_UseDefaultScoreTable) {
			Score::AddPoints(Players[_PlayerId], 2);
		} else {
			if (Players[_PlayerId].Score != Null) {
				Players[_PlayerId].Score.Points += 2;
			}
		}
		if (G_Overtime) {
			// Start countdown
			EndTime = Now + S_OvertimeLimit * 1000;
		}
		UpdateBaseClans();
		if (C_LogEnabled) MB_Log("""{{{Players[_PlayerId].Login}}} picked up the {{{T_Ball}}}!""");
	}
}

Void ResetBall() {
	G_BallCarrierId = NullId;
	G_BallDropPosition = G_BallHomePosition;
	if (G_ExtraTimeStart == 0) {
		UIManager.UIAll.BigMessage = T_BallReset;
		G_LastBigMessage = Now;
	}
	UpdateBaseClans();
	if (G_Overtime) {
		// Start countdown
		EndTime = Now + S_OvertimeLimit * 1000;
	}
	if (C_LogEnabled) MB_Log(T_BallReset);
}

// Ball carrier drops the ball
Void DropBall(Ident _PlayerId) {
	if (_PlayerId == NullId || !Players.existskey(_PlayerId) || _PlayerId == G_BallCarrierId) {
		declare Vec3 BallPosition;
		declare Text Message;
		
		// Get values of the dropped ball
		if (_PlayerId == NullId || !Players.existskey(_PlayerId)) {
			// Player left
			BallPosition = G_LastBallPosition;
			Message = TextLib::Compose(_("%1 dropped!"), T_Ball);
			
			if (C_LogEnabled) MB_Log("""Ball carrier {{{G_BallCarrierId}}} left the game -> Drop at {{{G_LastBallPosition}}}!""");
		} else {
			// Player still ingame
			BallPosition = Players[_PlayerId].Position;
			Message = TextLib::Compose(_("$<%1$> dropped the %2!"), Players[_PlayerId].Name, T_Ball);
			
			if (C_LogEnabled) MB_Log("""{{{Players[_PlayerId].Login}}} dropped the {{{T_Ball}}}!""");
		}
		
		// Perform drop
		G_BallCarrierId = NullId;
		G_BallDropPosition = BallPosition;
		UIManager.UIAll.BigMessage = Message;
		G_LastBigMessage = Now;
		G_BallDropTime = Now;
		G_LastBallResetSeconds = MathLib::CeilingInteger(C_DroppedBallResetTime / 1000.0);
		UpdateBaseClans();
		if (G_Overtime) {
			// Start countdown
			EndTime = Now + S_OvertimeLimit * 1000;
		}
	}
}

Void DropBall() {
	DropBall(NullId);
}

// Player gets passed the ball
Void PassBall(Ident _ShooterId, Ident _VictimId) {
	// Perform several checks if passing is allowed right now because of weird event bugs of the game itself
	if (_ShooterId != NullId && _VictimId != NullId && Players.existskey(_ShooterId) && Players.existskey(_VictimId) && Now > StartTime) {
		if (G_BallCarrierId != NullId && G_BallCarrierId == _ShooterId && Players[_VictimId].StartTime < Now && Players[_ShooterId].Armor > 0 && Players[_VictimId].Armor > 0 && (C_BotsCanHaveBall || !Players[_VictimId].IsFakePlayer)) {
			if (!S_LaserBattle || C_LongestInstaPassDist <= 0.0 || MathLib::Distance(Players[_ShooterId].Position, Players[_VictimId].Position) <= C_LongestInstaPassDist) {
				G_BallCarrierId = _VictimId;
				UIManager.UIAll.BigMessage = TextLib::Compose(_("$<%1$> has the $<%2%3$>!"), Players[_VictimId].Name, Teams[Players[_VictimId].CurrentClan-1].ColorText, T_Ball);
				G_LastBigMessage = Now;
				if (Players[_ShooterId].CurrentClan == Players[_VictimId].CurrentClan) {
					// Team pass -> Grant points!
					if (!Players[_ShooterId].IsFakePlayer) {
						declare Scores_MapPasses for Players[_ShooterId] = 0;
						Scores_MapPasses += 1;
						if (C_UseDefaultScoreTable) {
							Score::AddPoints(Players[_ShooterId], 2);
						} else {
							if (Players[_ShooterId].Score != Null) {
								Players[_ShooterId].Score.Points += 2;
							}
						}
						XmlRpc.SendCallback("passBall", "Shooter:"^Players[_ShooterId].Login^";Victim:"^Players[_VictimId].Login);
					}
				} else {
					// Pass to opponent
					if (G_Overtime) {
						// Start countdown
						EndTime = Now + S_OvertimeLimit * 1000;
					}
					UpdateBaseClans();
				}
				if (C_LogEnabled) MB_Log("""{{{Players[_ShooterId].Login}}} passed the {{{T_Ball}}} to {{{Players[_VictimId].Login}}}!""");
			} else {
				if (C_LongestInstaPassDist > 0.0) {
					// Show pass distance difference
					declare UI <=> UIManager.GetUI(Players[_ShooterId]);
					if (UI != Null) {
						declare LastStatusMessage for UI = 0;
						declare DistanceDiff =  MathLib::NearestInteger(MathLib::Distance(Players[_ShooterId].Position, Players[_VictimId].Position) - C_LongestInstaPassDist);
						UI.StatusMessage = TextLib::Compose(_("%1m too far away!"), TextLib::ToText(DistanceDiff));
						LastStatusMessage = Now;
					}
				}
			}
		}
	}
}

// Updates clan scores at the top
Void UpdateClanScoresSummary() {
	declare PlayerClan1Id = NullId;
	declare PlayerClan2Id = NullId;
	foreach (Player in Players) {
		if (PlayerClan1Id == NullId && Player.CurrentClan == 1) {
			PlayerClan1Id = Player.Id;
		} else {
			if (PlayerClan2Id == NullId && Player.CurrentClan == 2) {
				PlayerClan2Id = Player.Id;
			} else {
				if (PlayerClan1Id != NullId && PlayerClan2Id != NullId) {
					break;
				}
			}
		}
	}
	if (PlayerClan1Id != NullId && PlayerClan2Id != NullId) {
		UIManager.UIAll.OverlayScoreSummary = True;
		UIManager.UIAll.ScoreSummary_Player1 = PlayerClan1Id;
		UIManager.UIAll.ScoreSummary_Points1 = ClanScores[Players[PlayerClan1Id].CurrentClan];
		UIManager.UIAll.ScoreSummary_Player2 = PlayerClan2Id;
		UIManager.UIAll.ScoreSummary_Points2 = ClanScores[Players[PlayerClan2Id].CurrentClan];
	} else {
		UIManager.UIAll.OverlayScoreSummary = False;
	}
}

// Returns the remaining time of the dropped ball until it resets
Integer GetRmDrpdBallTime() {
	// Calculate standard remaining time
	declare DropTime = Now;
	if (G_BallCarrierId == NullId) {
		DropTime = G_BallDropTime;
	}
	declare RemainingTime = C_DroppedBallResetTime - (Now - DropTime);
	// Decrease time if necessary
	if (C_DecResetTimeToEndRound && EndTime < 0) {
		declare MinusSeconds = (Now - StartTime) / C_TimeToDecResetTime1Sec;
		RemainingTime -= MinusSeconds;
	}
	return RemainingTime;
}

// Call carrier frame
Text BallCarrierFrame() {
	declare WindowStyle = 3;
	declare ClanMarker = "";
	declare ClanMarkerColor = "";
	declare BallCarrierName = _("Home");
	if (G_BallCarrierId == NullId) {
		if (G_BallDropPosition != G_BallHomePosition) {
			BallCarrierName = TextLib::Compose(_("Dropped (%1)"), TextLib::ToText(MathLib::NearestInteger(GetRmDrpdBallTime() / 1000.0)));
		}
	} else {
		if (Players.existskey(G_BallCarrierId)) {
			BallCarrierName = """$<{{{Players[G_BallCarrierId].Name}}}$>""";
			
			// Get color of clan marker
			switch (Players[G_BallCarrierId].CurrentClan) {
				case 1: {
					ClanMarkerColor = "00f";
				}
				case 2: {
					ClanMarkerColor = "f00";
				}
			}
		} else {
			BallCarrierName = "";
		}
	}
	
	if (G_Overtime) {
		// Special overtime style
		WindowStyle = 2;
		// Clan marker blinks during overtime
		if (((Now - StartTime) / 500) % 3 == 2) {
			ClanMarkerColor = "";
		}
	}

	return """	<frame posn="110 -65">
					<quad posn="0 0 0" sizen="55 8" halign="center" valign="center" style="Bgs1InRace" substyle="BgWindow{{{WindowStyle}}}" />
					<quad posn="-26 0 1" sizen="1 6" halign="center" valign="center" bgcolor="{{{ClanMarkerColor}}}c"/>
					<quad posn="26 0 1" sizen="1 6" halign="center" valign="center" bgcolor="{{{ClanMarkerColor}}}c"/>
					<label posn="0 0.5 2" sizen="50 7" halign="center" valign="center" textprefix="$000" text="{{{BallCarrierName}}}" />
				</frame>""";
}

// Create simple teams layer manialink
Text GetSimpleTeamsLayer() {
	return """
		<script><!--
			main() {
				declare LastUIUpdate = 0;
				
				declare Label_Blue <=> (Page.GetFirstChild("BlueLabel") as CMlLabel);
				declare Label_Red <=> (Page.GetFirstChild("RedLabel") as CMlLabel);
				declare netread Net_NbPlayersBlue for UI = 0;
				declare netread Net_ColorBlue for UI = "";
				declare netread Net_NbPlayersRed for UI = 0;
				declare netread Net_ColorRed for UI = "";
				
				while (True) {
					yield;
					
					if (Now > LastUIUpdate + 200) {
						LastUIUpdate = Now;
						
						// Update display of player counts
						// Blue
						declare LabelText = Net_NbPlayersBlue^" ";
						if (Net_NbPlayersBlue > 1) {
							LabelText ^= _("Players");
						} else {
							LabelText ^= _("Player");
						}
						Label_Blue.SetText(LabelText);
						
						// Red
						LabelText = Net_NbPlayersRed^" ";
						if (Net_NbPlayersRed > 1) {
							LabelText ^= _("Players");
						} else {
							LabelText ^= _("Player");
						}
						Label_Red.SetText(LabelText);
					}
				}
			}
		--></script>
		<frame>
			// Blue team
			<quad posn="-32 90.2 0" sizen="15 3" halign="center" valign="top" bgcolor="{{{Color::RgbToHex(Teams[0].ColorPrimary)}}}7"/>
			<label posn="-32 90.0 1" scale="0.6" halign="center" valign="top" id="BlueLabel"/>
			
			// Red team
			<quad posn="32.5 90.2 0" sizen="15 3" halign="center" valign="top" bgcolor="{{{Color::RgbToHex(Teams[1].ColorPrimary)}}}7"/>
			<label posn="32.5 90.0 1" scale="0.6" halign="center" valign="top" id="RedLabel"/>
		</frame>""";
}

// Update simple teams layer
Void UpdateSimpleTeamsLayer(CSmPlayer _Player) {
	if (C_UseSimpleTeamsLayer) {
		declare UI <=> UIManager.GetUI(_Player);
		if (UI != Null) {
			declare netwrite Net_NbPlayersBlue for UI = 0;
			declare netwrite Net_NbPlayersRed for UI = 0;
			
			Net_NbPlayersBlue = ClansNbPlayersAlive[1];
			Net_NbPlayersRed = ClansNbPlayersAlive[2];
		}
	}
}

// Create marker layer
Text GetMarkersLayer() {
	declare Manialink = """
		<script><!--
			main() {
				declare LastUIUpdate = 0;
				
				declare Label_BallMarker <=> (Page.GetFirstChild("Label_BallMarker") as CMlLabel);
				declare Label_PoleMarkers = [	1 => (Page.GetFirstChild("Label_Pole1Marker") as CMlLabel),
												2 => (Page.GetFirstChild("Label_Pole2Marker") as CMlLabel)];
				
				declare Frame_BallMarker <=> (Page.GetFirstChild("Frame_BallMarker") as CMlFrame);
				declare Frame_PoleMarkers = [	1 => (Page.GetFirstChild("Frame_Pole1Marker") as CMlFrame),
												2 => (Page.GetFirstChild("Frame_Pole2Marker") as CMlFrame)];
				
				declare netread Net_BallCarrierClan for UI = 0;
				declare netread Net_RemainingDropTime for UI = -1;
				
				while (True) {
					yield;
					
					if (Now > LastUIUpdate + 200) {
						LastUIUpdate = Now;
						
						declare BallColor = "";
						switch (Net_BallCarrierClan) {
							case 1: {
								BallColor = "$00f";
							}
							case 2: {
								BallColor = "$f00";
							}
							default: {
								BallColor = "$fff";
							}
						}
						BallColor ^= "";
						if (Net_RemainingDropTime >= 0) {
							BallColor ^= ""^Net_RemainingDropTime/1000^"";
						}
						Label_BallMarker.Value = BallColor;
						
						declare PlayerId = NullId;
						if (InputPlayer != Null && GUIPlayer != Null && Players.exists(GUIPlayer)) {
							PlayerId = GUIPlayer.Id;
						} else {
							if (InputPlayer != Null && Players.exists(InputPlayer)) {
								PlayerId = InputPlayer.Id;
							}
						}
						if (Players.existskey(PlayerId) && Players[PlayerId].CurrentClan != 0) {
							foreach (Frame in Frame_PoleMarkers) {
								foreach (SubFrame in Frame.Controls) {
									SubFrame.Visible = True;
								}
							}
							
							declare AttackColor = "";
							declare DefendColor = "";
							switch (Players[PlayerId].CurrentClan) {
								case 1: {
									AttackColor = "$00f";
									DefendColor = "$f00";
								}
								case 2: {
									AttackColor = "$f00";
									DefendColor = "$00f";
								}
							}
							Label_PoleMarkers[Players[PlayerId].CurrentClan].Value = AttackColor^"Attack";
							Label_PoleMarkers[3-Players[PlayerId].CurrentClan].Value = DefendColor^"Defend";
						} else {
							foreach (Frame in Frame_PoleMarkers) {
								foreach (SubFrame in Frame.Controls) {
									SubFrame.Visible = False;
								}
							}
						}
					}
				}
			}
		--></script>
		<frame id="Frame_BallMarker" hidden="1">
			<quad sizen="5 9" halign="center" valign="bottom" style="Icons128x128_1" substyle="Vehicles"/>
			<label id="Label_BallMarker" posn="0.3 1.7" textprefix="$o" halign="center" valign="bottom"/>
		</frame>
		<frame id="Frame_Pole1Marker" hidden="1">
			<quad sizen="11 4" halign="center" valign="center" style="BgsPlayerCard" substyle="BgMediaTracker"/>
			<label id="Label_Pole1Marker" scale="0.6" halign="center" valign="center"/>
		</frame>
		<frame id="Frame_Pole2Marker" hidden="1">
			<quad sizen="11 4" halign="center" valign="center" style="BgsPlayerCard" substyle="BgMediaTracker"/>
			<label id="Label_Pole2Marker" scale="0.6" halign="center" valign="center"/>
		</frame>
	""";
	
	return Manialink;
}

// Updates markers layer
Void UpdateMarkersLayer(CSmPlayer _Player) {
	declare UI <=> UIManager.GetUI(_Player);
	if (UI != Null) {
		declare netwrite Net_BallCarrierClan for UI = 0;
		declare netwrite Net_RemainingDropTime for UI = -1;
		
		if (G_BallCarrierId == NullId || !Players.existskey(G_BallCarrierId)) {
			// Ball is dropped
			Net_BallCarrierClan = 0;
			Net_RemainingDropTime = GetRmDrpdBallTime();
		} else {
			Net_BallCarrierClan = Players[G_BallCarrierId].CurrentClan;
			Net_RemainingDropTime = -1;
		}
		
		// Markers
		UI.Hud3dMarkers = G_PoleMarkers;
		if (G_BallCarrierId == NullId) {
			// Dropped ball
			UI.Hud3dMarkers ^= """<marker pos="{{{G_BallDropPosition[0]}}} {{{G_BallDropPosition[1]}}} {{{G_BallDropPosition[2]}}}" manialinkframeid="Frame_BallMarker"/>""";
		} else {
			if (Players.existskey(G_BallCarrierId)) {
				if (Players[G_BallCarrierId].IsFakePlayer) {
					// Bot
					UI.Hud3dMarkers ^= """<marker pos="{{{Players[G_BallCarrierId].Position[0]}}} {{{Players[G_BallCarrierId].Position[1]+2.1}}} {{{Players[G_BallCarrierId].Position[2]}}}" manialinkframeid="Frame_BallMarker"/>""";
				} else {
					// Usual player
					UI.Hud3dMarkers ^= """<marker playerlogin="{{{Players[G_BallCarrierId].Login}}}" manialinkframeid="Frame_BallMarker"/>""";
				}
			}
		}
	}
}

// Update player position layer
Void UpdatePositionLayer(CSmPlayer _Player) {
	if (C_UsePositionLayer) {
		declare UI <=> UIManager.GetUI(_Player);
		if (UI != Null) {
			declare netwrite Net_LibInterface_LayerInfoUpdate for UI = 0;
			declare netwrite Net_LibInterface_PosTotal for UI = 0;
			declare netwrite Net_LibInterface_PosCurrent for UI = 0;
			
			Net_LibInterface_LayerInfoUpdate = Now;
			Net_LibInterface_PosTotal = Scores.count;
			Net_LibInterface_PosCurrent = Scores.keyof(_Player.Score) + 1;
		}
	}
}

// Creates message for near miss
Text GetNearMissMessage(CSmModeEvent _Event) {
	// Catch invalid events
	if (_Event.Type != CSmModeEvent::EType::OnNearMiss) return "";	// Wrong event type
	if (_Event.MissDist <= 0.0) return "";							// Invalid miss distance
	
	// Get message text
	declare Message = "";
	declare Dist = MathLib::NearestInteger(_Event.MissDist * 1000);
	if (Dist >= 10) {
		Message = (Dist/10.0)^"cm!";
	} else {
		Dist = MathLib::NearestInteger(_Event.MissDist * 10000);
		if (Dist >= 10) {
			Message = (Dist/10.0)^"mm!";
		} else {
			Dist = MathLib::NearestInteger(_Event.MissDist * 10000000);
			Message = (Dist/10.0)^"µm!";
		}
	}
	return TextLib::Compose(_("You missed $<%1$> by %2"), _Event.Victim.Name, Message);
}

// Get the current rankings for xmlrpc callbacks
Text GetRankings() {
	declare PlayerList = "";
	foreach (Score in Scores) {
		PlayerList ^= Score.User.Login^":"^Score.Points^";";
	}
	return PlayerList;
}
