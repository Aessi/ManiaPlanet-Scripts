/********************************************
*	Tjost Game Mode							*
*	Author:		steeffeen					*
*	Contact:	steeffeen@team-devota.com	*
********************************************/

#Extends "Modes/ShootMania/ModeBase.Script.txt"

#Const	ScriptName			"Tjost.Script.txt"
#Const	Version				"0.2 (2013-09-29)"

#Const	CompatibleMapTypes	"TjostArena,SpeedBallArena"

#Const	Description			_("Keep the Opponents away from your Goal Post and reach the Goal on the other Side of the Map to score for your Team.")

/********************************************
	INCLUDES
********************************************/

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Interface.Script.txt" as Interface
#Include "Libs/Nadeo/Message.Script.txt" as Message
#Include "Libs/Nadeo/TabsServer.Script.txt" as Tabs
#Include "Libs/Nadeo/Top2.Script.txt" as Top
#Include "Libs/Nadeo/Victory.Script.txt" as Victory
#Include "Libs/Nadeo/ShootMania/AFK.Script.txt" as AFK
#Include "Libs/Nadeo/ShootMania/Score.Script.txt" as Score
#Include "Libs/Nadeo/ShootMania/ScoresTable.Script.txt" as ScoresTable
#Include "Libs/Nadeo/ShootMania/SM.Script.txt" as SM
#Include "Libs/Nadeo/ShootMania/SpawnScreen.Script.txt" as SpawnScreen
#Include "Libs/steeffeen/Tools.Script.txt" as Tools
#Include "Libs/steeffeen/ShootMania/Bots.Script.txt" as Bots

/********************************************
	SETTINGS
********************************************/

// Match
#Setting	S_TimeLimit				180		as _("Time Limit per Round (seconds)")
#Setting	S_RoundToWin			5		as _("Rounds to win a Map")
#Setting	S_RoundsGap				2		as _("Rounds Gap to win a Map")
#Setting	S_RoundsLimit			10		as _("Round Limit per Map (first Team reaching X wins)")
// Gameplay
#Setting	S_CrazyModeActive		False	as _("Enable Crazy Mode")
#Setting	S_GrantArmorOnHit		True	as _("Grant Armor on Hits")
#Setting	S_EnableCampZone		True	as _("Weaken camping players")
// UI
#Setting	S_UsePlayerClublinks	False	as "<hidden>"
// Bots
#Setting	S_NbBotsBlue			0		as "<hidden>"
#Setting	S_NbBotsRed				0		as "<hidden>"

/********************************************
	CONSTANTS
********************************************/

#Const 	C_ImgBaseDir			"file://Media/Manialinks/Shootmania/Common/"
#Const	C_ManageAFKPlayers		True	// Force afk players into spec
// Gameplay
#Const	C_CrazyModeArmorGain	9.0		// Armor gain while playing in crazy mode (Range: 0.0 - 10.0)
#Const	C_OvertimeTimeLimit		60		// Time limit of overtime
#Const	C_ArmorGrantedPerHit	60		// Armor granted per hit (100 = 1 point of armor) -> Only if S_GrantArmorOnHit!
#Const	C_TimePerArmorLose		2.		// Seconds to lose 1 armor near own pole & spawn (camping prevention) (-1 to disable)
#Const	C_CapturePointsFactor	2.		// Capture points: C_CapturePointsFactor * (2 + Number of opponents)
#Const	C_PointsForBackspace	-1		// Points granted if someone presses backspace
#Const	C_DefaultCampZoneRadius	25.0	// Distance for reducing armor and preventing backspace weapon change
#Const	C_BotPower				10.		// Power/Strength of bots
#Const	C_DefaultRespawnTime	3000	// Time it takes to respawn usually
#Const	C_RespawnPenaltyTime	5000	// Respawn penalty extra time
// UI
#Const	C_MissMessageMaxDist	0.9		// Max miss distance for near miss message
#Const	C_NeutralEmblemUrl		""		// Neutral emblem URL
// Weapons
#Const	C_AmmoGainRocket		1.
#Const	C_AmmoGainLaser			1.
#Const	C_AmmoGainNucleus		0.7
#Const	C_AmmoGainArrow			0.9

// Top rankings names
#Const	T_Damage		"Damage"
#Const	T_Captures		"Capture"
#Const	T_BackStabber	"BackStabber"

/********************************************
	GLOBALES
********************************************/

declare Ident[Integer]	G_ClanSpawns;				// Ids of the spawns
declare Ident[Integer]	G_ClanPoles;				// Ids of the goal posts
declare Integer			G_LastUIUpdate;				// Time of last UI update
declare Boolean			G_Overtime;					// Whether overtime is active
declare Integer			G_AnnouncementStatus;		// Status code for countdown announcements

/********************************************
	EXTENSIONS
********************************************/

***LogVersion***
***
MB_LogVersion(ScriptName, Version);
MB_LogVersion(AFK::GetScriptName(), AFK::GetScriptVersion());
MB_LogVersion(Interface::GetScriptName(), Interface::GetScriptVersion());
MB_LogVersion(Message::GetScriptName(), Message::GetScriptVersion());
MB_LogVersion(Score::GetScriptName(), Score::GetScriptVersion());
MB_LogVersion(ScoresTable::GetScriptName(), ScoresTable::GetScriptVersion());
MB_LogVersion(SM::GetScriptName(), SM::GetScriptVersion());
MB_LogVersion(SpawnScreen::GetScriptName(), SpawnScreen::GetScriptVersion());
MB_LogVersion(Tabs::GetScriptName(), Tabs::GetScriptVersion());
MB_LogVersion(Top::GetScriptName(), Top::GetScriptVersion());
MB_LogVersion(Victory::GetScriptName(), Victory::GetScriptVersion());
***

***Rules***
***
SpawnScreen::SetModeName("Tjost");
SpawnScreen::ResetRulesSection();

declare SectionRules = TextLib::Compose(_("%1Keep%2 the %1Opponents away%2 from your Goal Post.\n%1Reach%2 the %1Goal%2 on the other side of the Map %1to score%2 for your Team.\n\nIf neither Team manages to score after %3 seconds, %1Overtime%2 kicks in!\nNow you have %4 seconds to get as close to your Team's Goal Post as possible."), "$<$0f0", "$>", "$<$f80"^S_TimeLimit^"$>", "$<$f80"^C_OvertimeTimeLimit^"$>");
SpawnScreen::AddSubsection(_("Rules"), SectionRules, 0.);

if (S_EnableCampZone) {
	declare SectionGrantArmor = TextLib::Compose("%1\n%2",
		_("Camping your Goal Post the whole time will make you lose Armor constantly."),
		_("While staying in the Camp Zone your weapons won't reload."));
	SpawnScreen::AddSubsection(_("Camp Zone"), SectionGrantArmor, 52.);
}

if (S_GrantArmorOnHit) {
	declare SectionGrantArmor = TextLib::Compose(_("You will get %1 Armor granted for each Shot you land on any Player!"), "$<$f80"^(C_ArmorGrantedPerHit/100.)^"$>");
	SpawnScreen::AddSubsection(_("Armor Granting"), SectionGrantArmor, 81.);
}

if (S_CrazyModeActive) {
	declare SectionCrazyMode = TextLib::Compose(_("Crazy Mode Active: 10 Armor + 10 Shots + Fast Reload + Self Hits!"));
	SpawnScreen::AddSubsection(_("Crazy Mode"), SectionCrazyMode, 104.);
}

SpawnScreen::CreatePrettyRules("Tjost");
***

***StartServer***
***
// Script variables
UseClans = True;
MB_UseSectionRound = True;
G_LastUIUpdate = 0;

// Clublinks
MB_UsePlayerClublinks = S_UsePlayerClublinks;
if (MB_NeutralEmblemUrl == "") MB_NeutralEmblemUrl = C_NeutralEmblemUrl;

// UI
SM::SetupDefaultVisibility();
// Hide map warnings to suppress the "Pole captured by X" message
UIManager.UIAll.NoticesFilter_HideMapWarning = True;

// UI
---Rules---
SpawnScreen::CreateMapInfo();
SpawnScreen::CreateScores();
Interface::CreateRank();
Interface::CreatePlayersLists("Medium", 0.67, 10, 1);

// Range Layer
declare MarkersLayer <=> UIManager.UILayerCreate();
MarkersLayer.Type = CUILayer::EUILayerType::Markers;
MarkersLayer.ManialinkPage = GetMarkersLayerManialink();
UIManager.UIAll.UILayers.add(MarkersLayer);
// Extras Layer
declare ExtrasLayer <=> UIManager.UILayerCreate();
ExtrasLayer.ManialinkPage = GetExtrasLayerManialink();
UIManager.UIAll.UILayers.add(ExtrasLayer);

{
// Tabs
Tabs::Load();
declare TabsLayer <=> Tabs::CreateTabPaneLayer(["ScoresTab" => "Rankings", "TopTab" => "Buddies"], 14, -2, False);
TabsLayer.Type = CUILayer::EUILayerType::AltMenu;
UIManager.UIAll.UILayers.add(TabsLayer);

// ScoresTable
ScoresTable::Load();
ScoresTable::SetTableWidth(218.);
ScoresTable::SetTableFormat(2, 6);
ScoresTable::SetTableBackgroundLeftRightImage(C_ImgBaseDir^"scoresBg.dds", C_ImgBaseDir^"scoresBg_left.dds", C_ImgBaseDir^"scoresBg_right.dds",
	"", "", 90, 50, 50, <0.05, 54.>, <237., 176.8>);
ScoresTable::SetColumnsWidth(1.7, 1.2, 3., 16., 1.4, 1.4, 0.1, 2.5, 2.5, 2.5, 3.2);
ScoresTable::SetDisplayTeamScore(True);
ScoresTable::SetColumnName("Custom2", _("|Amount of damage inflicted|Dmg"));
ScoresTable::SetColumnName("Custom3", _("|Number of captures done|Caps"));
ScoresTable::Build();

// Tops tab
Top::Load();
Top::SetLayerType(CUILayer::EUILayerType::AltMenu);
declare TopWidth = 70.;
Top::SetTopWidth(TopWidth);
Top::SetColor("Background", "0002");
Top::SetCommonBackgroundImage(C_ImgBaseDir^"topsBg.dds", <0., 96.5>, <237., 177.5>);
declare Tops = [	T_Damage		=> _("Top Damage"),
					T_Captures		=> _("Top Captures"),
					T_BackStabber	=> _("Flop BackStabber")];
declare Count = -1;
foreach (Key => Name in Tops) {
	declare X = 0. + Count * TopWidth + Count * 2.;
	Top::Create(Key, Name, 13, <X, 37.5>);
	Count += 1;
}
}

// Bots
Bots::Load();
Bots::SetPower(C_BotPower);
***

***StartMap***
***
UIManager.UIAll.SendNotice(_("New Match"),
	CUIConfig::ENoticeLevel::MatchInfo, Null, CUIConfig::EAvatarVariant::Default, 
	CUIConfig::EUISound::StartMatch, 0);

// Prepare map
G_ClanSpawns.clear();
G_ClanPoles.clear();
foreach (Base in Bases) {
	Base.Clan = 0;
	Base.IsActive = True;
}
foreach (Spawn in BlockSpawns) {
	G_ClanSpawns[Spawn.Order] = Spawn.Id;
}
foreach (Pole in BlockPoles) {
	G_ClanPoles[Pole.Order] = Pole.Id;
	Pole.Gauge.Clan = 0;
	Pole.Gauge.Max = 1000;
}
UIManager.UIAll.Hud3dMarkers = GetHud3dMarkers();

// Prepare match
Score::MatchBegin();
Victory::MatchBegin();
ClanScores[1] = 0;
ClanScores[2] = 0;
Top::ResetAll();
ScoresTable::StartMatch();
foreach (Player in AllPlayers) {
	InitPlayer(Player, True);
}

// UI
MarkersLayer.IsVisible = True;
ExtrasLayer.IsVisible = True;
***

***StartRound***
***
Message::CleanAllMessages();

Score::RoundBegin();
Victory::RoundBegin();

if (S_UsePlayerClublinks) Clublink::DefineTeamAuto();

// Prepare next round
PrepareNextRound();

UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;

StartTime = Now + 3000;
UIManager.UIAll.CountdownEndTime = StartTime + S_TimeLimit * 1000;
EndTime = UIManager.UIAll.CountdownEndTime + C_OvertimeTimeLimit * 1000;
***

***OnNewPlayer***
***
InitPlayer(Player, False);
ScoresTable::RestoreCustomScores(Player);

declare UI <=> UIManager.GetUI(Player);
if (UI == Null) continue;
Tabs::UseTabs(UI, "ScoresTab");
***

***OnNewSpectator***
***
InitPlayer(Spectator, False);
ScoresTable::RestoreCustomScores(Spectator);

declare UI <=> UIManager.GetUI(Spectator);
if (UI == Null) continue;
Tabs::UseTabs(UI, "ScoresTab");
***

***Yield***
***
Message::Loop();
Tabs::XmlRpcLoop();
Top::Loop();
Bots::Loop();
***

***PlayLoop***
***
// Check mode settings
CheckModeSettings();

// Perform actions for each player
foreach (Player in Players) {
	switch (Player.SpawnStatus) {
		case CSmPlayer::ESpawnStatus::NotSpawned: {
			MySpawnPlayer(Player, True, False);
		}
		case CSmPlayer::ESpawnStatus::Spawned: {
			if (Player.CurrentClan != Player.RequestedClan || Player.RequestsSpectate) {
				// Player wants to change team or spectate
				UnspawnPlayer(Player);
				declare Boolean Backspaced for Player;
				Backspaced = False;
			} else {
				// Update camp zone status
				declare netwrite Boolean Net_InCampZone for Player;
				Net_InCampZone = IsInCampZone(Player);
				
				// Update ammo gain
				UpdatePlayerAmmoGain(Player, Net_InCampZone);
				
				if (Net_InCampZone) {
					// Lose armor
					if (S_CrazyModeActive && C_TimePerArmorLose > 0 && Player.StartTime + 5000 <= Now) {
						declare LastArmorLose for Player = 0;
						if (LastArmorLose + C_TimePerArmorLose * 10 < Now) {
							LastArmorLose = Now;
							if (Player.Armor <= 100) {
								Player.Armor -= 100;
							} else {
								Player.Armor -= 1;
							}
						}
					}
				}
				
				// Check for captures
				if (Player.BlockPole != Null && Player.BlockPole.Gauge != Null && Player.BlockPole.Gauge.Clan == Player.CurrentClan) {
					Player.BlockPole.Gauge.ValueReal = 1.0;
					Player.BlockPole.Gauge.Speed = 1000;
				}
				
				if (G_Overtime && G_ClanPoles.existskey(Player.CurrentClan)) {
					// Check for reached distance
					declare netwrite Net_ClanDistances for Teams[0] = Real[Integer];
					declare DistancePole = Tools::Round(MathLib::Distance(Player.Position, BlockPoles[G_ClanPoles[Player.CurrentClan]].Position), 1);
					if (!Net_ClanDistances.existskey(Player.CurrentClan) || Net_ClanDistances[Player.CurrentClan] < 0.
						|| DistancePole < Net_ClanDistances[Player.CurrentClan]) {
						Net_ClanDistances[Player.CurrentClan] = DistancePole;
					}
				}
			}
		}
	}
}

// Handle events
foreach (Event in PendingEvents) {
	switch (Event.Type) {
		case CSmModeEvent::EType::OnCapture: {
			// Goal captured!
			Victory::SetRoundWinnerIfNoWinner(Event.BlockPole.Gauge.Clan);
			// Grant points for capture
			declare CSmPlayer Capturer <=> Null;
			declare CapturePoints = MathLib::FloorInteger((2. + ClansNbPlayers[3 - Event.BlockPole.Gauge.Clan]) * C_CapturePointsFactor);
			foreach (PlayerId in Event.BlockPole.Sector.PlayersIds) {
				if (!Players.existskey(PlayerId) || Players[PlayerId].CurrentClan != Event.BlockPole.Gauge.Clan) continue;
				Capturer <=> Players[PlayerId];
				Score::AddPoints(Capturer, CapturePoints);
			}
			if (Capturer == Null || !Teams.existskey(Capturer.CurrentClan-1)) continue;
			UpdateCaptures(Capturer, 1);
			if (!Capturer.IsFakePlayer) {
				XmlRpc::OnCapture(Event);
			}
			UIManager.UIAll.SendNotice(TextLib::Compose(_("%1 captured the %2Goal%3!"), Tools::GetColorizedPlayerName(Capturer),
				"$<"^Teams[Capturer.CurrentClan-1].ColorText, "$>"),
				CUIConfig::ENoticeLevel::MatchInfo, Null, CUIConfig::EAvatarVariant::Default, 
				CUIConfig::EUISound::Capture, 0);
			PassOn(Event);
		}
		case CSmModeEvent::EType::OnPlayerRequestRespawn: {
			// Reduce points because of backspace
			Score::AddPoints(Event.Shooter, C_PointsForBackspace);
			// Respawn player with or without (?) new random weapon
			declare IsCamping = IsInCampZone(Event.Player);
			// Check for backspace penalty
			declare Backspaced for Event.Player = False;
			MySpawnPlayer(Event.Player, IsCamping, Backspaced);
			Backspaced = True;
			if (!Event.Player.IsFakePlayer) {
				XmlRpc::OnPlayerRequestRespawn(Event);
			}
			Discard(Event);
		}
		case CSmModeEvent::EType::OnArmorEmpty: {
			if (Event.Shooter == Null && C_ManageAFKPlayers) {
				// AFK check with last death position
				declare LastDeathPosition for Event.Victim = <-1., -1., -1.>;
				if (LastDeathPosition == Event.Victim.Position) {
					// Died on same spot - Afk! - Switch to spec
					declare UI <=> UIManager.GetUI(Event.Victim);
					if (UI != Null) {
						UI.SendNotice(_("You are inactive! Switching to spec..."),
							CUIConfig::ENoticeLevel::Default, Null, CUIConfig::EAvatarVariant::Default, 
							CUIConfig::EUISound::Silence, 0);
					}
					Users_RequestSwitchToSpectator(Event.Victim.User);
				} else {
					// Not afk - Save position for next check
					LastDeathPosition = Event.Victim.Position;
				}
			}
			// Reset backspace penalty
			declare Boolean Backspaced for Event.Victim;
			Backspaced = False;
			if (!Event.Victim.IsFakePlayer) {
				XmlRpc::OnArmorEmpty(Event);
			}
			PassOn(Event);
		}
		case CSmModeEvent::EType::OnHit: {
			if (Event.Shooter == Null || Event.Victim == Null ) {
				// Discard buggy event
				Discard(Event);
			} else {
				// Reduce damage to 1
				Event.Damage = 100;
				if (Event.Shooter == Event.Victim && !S_CrazyModeActive) {
					// Discard self hit
					Discard(Event);
				} else {
					// Kill victim if it hasn't at least 2 armor
					if (Event.Victim.Armor < 200) {
						Event.Damage = Event.Victim.Armor;
					}
					// Grant points
					declare Points = 1;
					if (Event.Shooter.CurrentClan == Event.Victim.CurrentClan) {
						// Negative points for team hits
						Points *= -1;
						// Update backstabber top
						UpdateBackStabber(Event.Shooter, Event.Damage);
					} else {
						// Update damage top
						UpdateDamage(Event.Shooter, Event.Damage);
					}
					Event.ShooterPoints = Points;
					// Grant armor for hits
					if (S_GrantArmorOnHit && Event.Shooter != Event.Victim) {
						Event.Shooter.Armor += C_ArmorGrantedPerHit;
					}
					Score::AddPoints(Event.Shooter, Points);
					if (!Event.Shooter.IsFakePlayer && !Event.Victim.IsFakePlayer) {
						XmlRpc::OnHit(Event);
					}
					PassOn(Event);
				}
			}
		}
		case CSmModeEvent::EType::OnNearMiss: {
			SendNearMissMessage(Event);
			PassOn(Event);
		}
		default: {
			PassOn(Event);
		}
	}
}

// Round end conditions
if (Now >= UIManager.UIAll.CountdownEndTime) {
	if (ClansNbPlayers[1] <= 0 || ClansNbPlayers[2] <= 0) {
		// Insufficient number of players
		Victory::SetRoundDrawIfNoWinner();
	} else {
		// Regular time is up -> Run overtime
		if (!G_Overtime) {
			G_Overtime = True;
			UIManager.UIAll.CountdownEndTime = -1;
			UIManager.UIAll.SendNotice("",
				CUIConfig::ENoticeLevel::MatchInfo, Null, CUIConfig::EAvatarVariant::Default,
				CUIConfig::EUISound::PhaseChange, 1);
		} else {
			if (Now >= EndTime) {
				// Round time is up -> Evaluate reached distances
				declare netwrite Net_ClanDistances for Teams[0] = Real[Integer];
				for (Clan, 1, 2) {
					if (!Net_ClanDistances.existskey(Clan) || Net_ClanDistances[Clan] < 0.) continue;
					if (!Net_ClanDistances.existskey(3 - Clan) || Net_ClanDistances[3 - Clan] < 0.
						|| Net_ClanDistances[Clan] < Net_ClanDistances[3 - Clan]) {
						// Team got closer than the other team
						Victory::SetRoundWinnerIfNoWinner(Clan);
						break;
					}
				}
				Victory::SetRoundDrawIfNoWinner();
			}
		}
	}
} else {
	if (Now >= UIManager.UIAll.CountdownEndTime - 10000 && G_AnnouncementStatus == 0) {
		// Announce the end of the countdown
		UIManager.UIAll.SendNotice("",
			CUIConfig::ENoticeLevel::MatchInfo, Null, CUIConfig::EAvatarVariant::Default,
			CUIConfig::EUISound::Warning, 1);
		G_AnnouncementStatus += 1;
	}
}
if (!Victory::NoRoundWinner()) {
	MB_StopRound = True;
}

// UI updates
if (G_LastUIUpdate + 200 > Now) continue;
G_LastUIUpdate = Now;

// Score summary
Tools::UpdateClanScoresSummary();

// Netwrite Overtime
declare netwrite Boolean Net_Overtime for Teams[0];
Net_Overtime = G_Overtime;
***

***EndRound***
***
SM::UnspawnAllPlayers();
StartTime = -1;
UIManager.UIAll.CountdownEndTime = -1;
EndTime = -1;

declare Message = _("Round Draw!");
if (!Victory::IsRoundDraw()) {
	foreach (Clan => Team in Teams) {
		if (!Victory::IsRoundWinner(Clan + 1)) continue;
		Message = TextLib::Compose(_("%1 wins the Round!"), "$<"^Teams[Clan].ColorizedName^"$>");
		ClanScores[Clan+1] += 1;
		break;
	}
}
Message::SendBigMessage(Message, 3500, 2);

Tools::UpdateClanScoresSummary();
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;

MB_Sleep(2000);

Score::RoundEnd();
Victory::RoundEnd();

// Match end conditions
Victory::SetMatchWinnerFromScore(S_RoundToWin, S_RoundsGap, S_RoundsLimit);
if (!Victory::NoMatchWinner()) {
	MB_StopMap = True;
}

MB_Sleep(500);
***

***EndMap***
***
Score::MatchEnd();
Victory::MatchEnd();
ScoresTable::EndMatch();
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;
	
foreach (Clan => Team in Teams) {
	if (!Victory::IsMatchWinner(Clan + 1)) continue;
	Message::SendBigMessage(TextLib::Compose(_("%1 wins the Map!"), "$<"^Teams[Clan].ColorizedName^"$>"), 3500, 3);
	break;
}
MB_Sleep(500);

// Hide UI
MarkersLayer.IsVisible = False;
ExtrasLayer.IsVisible = False;

MB_Sleep(3500);
***

***EndServer***
***
Bots::Unload();
Top::Unload();
SpawnScreen::DestroyRules();
SpawnScreen::DestroyMapInfo();
SpawnScreen::DestroyScores();
Interface::DestroyRank();
Interface::DestroyPlayersLists();
UIManager.UILayerDestroyAll();
***

/********************************************
	FUNCTIONS
********************************************/

// Prepare map and blocks for the next round
Void PrepareNextRound() {
	// VALUES
	declare netwrite Boolean Net_Overtime for Teams[0];
	Net_Overtime = False;
	declare netwrite Net_ClanDistances for Teams[0] = Real[Integer];
	Net_ClanDistances.clear();
	G_AnnouncementStatus = 0;

	// POLES
	// Switch sides
	declare Temp = G_ClanPoles[1];
	G_ClanPoles[1] = G_ClanPoles[2];
	G_ClanPoles[2] = Temp;
	// Assign teams & values
	foreach (Clan => PoleId in G_ClanPoles) {
		if (!BlockPoles.existskey(PoleId)) continue;
		declare Pole <=> BlockPoles[PoleId];
		Pole.Base.Clan = Clan;
		Pole.Gauge.Clan = Clan;
		Pole.Gauge.Speed = 0;
		Pole.Gauge.Value = 999;
		Bots::SetAnchorPoint(Pole.Position, Pole.Gauge.Clan);
	}
	
	// SPAWNS
	// Switch sides
	Temp = G_ClanSpawns[1];
	G_ClanSpawns[1] = G_ClanSpawns[2];
	G_ClanSpawns[2] = Temp;
	// Assign teams
	foreach (Clan => SpawnId in G_ClanSpawns) {
		if (!BlockSpawns.existskey(SpawnId)) continue;
		BlockSpawns[SpawnId].Base.Clan = Clan;
	}
}

// Updates the player ammo gain based on the current situation
Void UpdatePlayerAmmoGain(CSmPlayer _Player, Boolean _Camping) {
	if (_Player == Null) return;
	if (_Camping) {
		_Player.AmmoGain = 0.;
	} else {
		declare Factor = 1.;
		if (S_CrazyModeActive) Factor *= C_CrazyModeArmorGain;
		switch (_Player.CurWeapon) {
			case 1: {
				Factor *= C_AmmoGainLaser;
			}
			case 2: {
				Factor *= C_AmmoGainRocket;
			}
			case 3: {
				Factor *= C_AmmoGainNucleus;
			}
			case 5: {
				Factor *= C_AmmoGainArrow;
			}
		}
		_Player.AmmoGain = Factor;
	}
}

// Spawn the given player and perform necessary actions
Void MySpawnPlayer(CSmPlayer _Player, Boolean _RandomWeapon, Boolean _Penalty) {
	if (_Player == Null) return;
	UnspawnPlayer(_Player);
	if (_Player.RequestsSpectate) return;
	
	// Set random weapon
	if (_RandomWeapon) {
		declare Weapon = MathLib::Rand(0, 3);
		switch (Weapon) {
			case 1: {
				SetPlayerWeapon(_Player, CSmMode::EWeapon::Laser, True);
			}
			case 2: {
				SetPlayerWeapon(_Player, CSmMode::EWeapon::Nucleus, True);
			}
			case 3: {
				SetPlayerWeapon(_Player, CSmMode::EWeapon::Arrow, True);
			}
			default: {
				SetPlayerWeapon(_Player, CSmMode::EWeapon::Rocket, True);
			}
		}
	}
	
	// Set player values
	_Player.ArmorGain = 0;
	UpdatePlayerAmmoGain(_Player, False);
	if (S_CrazyModeActive) {
		// Crazy Mode
		SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, 10);
		SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Laser, 10);
		SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Nucleus, 10);
		_Player.ArmorMax = 1000;
	} else {
		// Normal Mode
		SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, 4);
		SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Laser, 1);
		SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Nucleus, 2);
		_Player.ArmorMax = 200;
	}
	
	// Spawn player
	declare SpawnTime = Now + C_DefaultRespawnTime;
	if (_Penalty) {
		SpawnTime += C_RespawnPenaltyTime;
		declare Message = TextLib::Compose(_("%1%2 Seconds Backspace Penalty!"), "$f60",
			TextLib::ToText((C_DefaultRespawnTime + C_RespawnPenaltyTime) / 1000));
		Message::SendStatusMessage(_Player, Message, 3500, 1);
	}
	SM::SpawnPlayer(_Player, _Player.RequestedClan, BlockSpawns[G_ClanSpawns[_Player.RequestedClan]], SpawnTime);
}

// Check for changed script settings
Void CheckModeSettings() {
	declare UpdateRules = False;
	
	// Crazy mode
	declare Old_CrazyModeActive for This = S_CrazyModeActive;
	if (Old_CrazyModeActive != S_CrazyModeActive) {
		Old_CrazyModeActive = S_CrazyModeActive;
		// Announce change
		if (S_CrazyModeActive) {
			UIManager.UIAll.SendChat("$<$f80Crazy Mode$> is now $<$0f0actived$>!");
		} else {
			UIManager.UIAll.SendChat("$<$f80Crazy Mode$> is now $<$f00deactived$>!");
		}
		UpdateRules = True;
	}
	
	// Grant armor on hits
	declare Old_GrantArmorOnHit for This = S_GrantArmorOnHit;
	if (Old_GrantArmorOnHit != S_GrantArmorOnHit) {
		Old_GrantArmorOnHit = S_GrantArmorOnHit;
		UpdateRules = True;
	}
	
	// Handle afk players
	declare LastAfkHandling for This = -1;
	if (C_ManageAFKPlayers && StartTime + 10000 < Now && LastAfkHandling + 10000 < Now) {
		LastAfkHandling = Now;
		AFK::ManageAFKPlayers();
	}
	
	// Camp zone
	declare Last_EnableCampZone for This = S_EnableCampZone;
	if (Last_EnableCampZone != S_EnableCampZone) {
		Last_EnableCampZone = S_EnableCampZone;
		if (S_EnableCampZone) {
			UIManager.UIAll.SendChat("$<$f80Camp Zone$> is now $<$0f0actived$>!");
		} else {
			UIManager.UIAll.SendChat("$<$f80Camp Zone$> is now $<$f00deactived$>!");
		}
	}
	
	// Bots
	declare Last_NbBotsBlue for This = -1;
	declare Last_NbBotsRed for This = -1;
	if (Last_NbBotsBlue != S_NbBotsBlue || Last_NbBotsRed != S_NbBotsRed) {
		Last_NbBotsBlue = S_NbBotsBlue;
		Last_NbBotsRed = S_NbBotsRed;
		Bots::SetNbBots(S_NbBotsBlue, S_NbBotsRed);
	}
	
	if (UpdateRules) {
		// Update rules
		---Rules---
	}
}

// Get Hud3dMarkers
Text GetHud3dMarkers() {
	declare Markers = "";
	foreach (Pole in BlockPoles) {
		if (Pole.Order == 1 || Pole.Order == 2) {
			Markers ^= """<marker manialinkframeid="Frame_PoleMarker{{{Pole.Order}}}" pos="{{{Tools::GetPosn(Pole.Position)}}}" box="0 6 0"
				visibility="WhenInFrustum"/>""";
		}
	}
	return Markers;
}

// Get manialink for MarkersLayer
Text GetMarkersLayerManialink() {
	declare Manialink = """<script><!--
		#Include "TextLib" as TextLib
		
		main() {
			wait(InputPlayer != Null && Page != Null);
			
			declare Label_PoleMarker1 <=> (Page.GetFirstChild("Label_PoleMarker1") as CMlLabel);
			declare Label_PoleMarker2 <=> (Page.GetFirstChild("Label_PoleMarker2") as CMlLabel);
			
			declare LastMapId = NullId;
			declare PoleIds = Ident[Integer];
			
			declare LastUIUpdate = 0;
			
			while (True) {
				yield;
				
				if (LastUIUpdate + 200 > Now) continue;
				LastUIUpdate = Now;
				
				declare LocalPlayer <=> InputPlayer;
				if (GUIPlayer != Null) LocalPlayer <=> GUIPlayer;
				
				// Update map poles
				if (LastMapId != Map.Id) {
					LastMapId = Map.Id;
					PoleIds.clear();
					foreach (Pole in BlockPoles) {
						if (Pole.Order == 1 || Pole.Order == 2) {
							PoleIds[Pole.Order] = Pole.Id;
						}
					}
				}
				
				// Update pole markers
				foreach (Order => Id in PoleIds) {
					if (!BlockPoles.existskey(Id)) continue;
					declare Pole <=> BlockPoles[Id];
					declare Tag = "";
					declare PoleClan = Pole.Gauge.Clan - 1;
					if (Teams.existskey(PoleClan)) {
						declare Team <=> Teams[PoleClan];
						if (IsSpectatorMode) {
							Tag = TextLib::Compose("%1%2 %3", Team.ColorText, Team.ColorizedName, _("|Imperative|Attack"));
						} else {
							if (Pole.Gauge.Clan == LocalPlayer.CurrentClan) {
								Tag = TextLib::Compose("%1%2", Team.ColorText, _("|Imperative|Attack"));
							} else {
								Tag = TextLib::Compose("%1%2", Team.ColorText, _("|Imperative|Defend"));
							}
						}
					}
					switch (Order) {
						case 1: {
							Label_PoleMarker1.Value = Tag;
						}
						case 2: {
							Label_PoleMarker2.Value = Tag;
						}
					}
				}
			}
		}
		--></script>
		<frame id="Frame_PoleMarker1" hidden="1">
			<label id="Label_PoleMarker1" posn="0 4" sizen="18 0" textsize="2" scale="0.8" halign="center" valign="center2"/>
			<quad posn="0 4" sizen="13 4" halign="center" valign="center" style="BgsPlayerCard" substyle="BgMediaTracker"/>
		</frame>
		<frame id="Frame_PoleMarker2" hidden="1">
			<label id="Label_PoleMarker2" posn="0 4" sizen="18 0" textsize="2" scale="0.8" halign="center" valign="center2"/>
			<quad posn="0 4" sizen="13 4" halign="center" valign="center" style="BgsPlayerCard" substyle="BgMediaTracker"/>
		</frame>""";
	return Manialink;
}

// Get overtime layer manialink
Text GetExtrasLayerManialink() {
	declare Manialink = """<script><!--
		#Include "TextLib" as TextLib
		
		main() {
			wait(InputPlayer != Null && Page != Null);
			
			declare Frame_CampZone <=> (Page.GetFirstChild("Frame_CampZone") as CMlFrame);
			declare Label_CampZone <=> (Frame_CampZone.GetFirstChild("Label_CampZone") as CMlLabel);
			
			declare Frame_Overtime <=> (Page.GetFirstChild("Frame_Overtime") as CMlFrame);
			declare Label_Team1 <=> (Frame_Overtime.GetFirstChild("Label_Team1") as CMlLabel);
			declare Label_Team2 <=> (Frame_Overtime.GetFirstChild("Label_Team2") as CMlLabel);
			
			declare netread Net_Overtime for Teams[0] = False;
			declare netread Net_ClanDistances for Teams[0] = Real[Integer];
			
			declare LastUIUpdate = -1;
			
			while (True) {
				yield;
				
				if (LastUIUpdate + 200 > Now) continue;
				LastUIUpdate = Now;
				
				declare LocalPlayer <=> InputPlayer;
				if (GUIPlayer != Null) LocalPlayer <=> GUIPlayer;
				
				// Campzone display
				declare netread Net_InCampZone for LocalPlayer = False;
				Frame_CampZone.Visible = Net_InCampZone && LocalPlayer.StartTime + 1000 < ArenaNow
					&& LocalPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned;
				if (Frame_CampZone.Visible) {
					declare Color = "";
					if (Teams.existskey(LocalPlayer.CurrentClan-1)) Color = Teams[LocalPlayer.CurrentClan-1].ColorText;
					Label_CampZone.Value = TextLib::Compose("%1%2", Color, _("Camp Zone!"));
				}
				
				// Overtime information
				Frame_Overtime.Visible = Net_Overtime;
				if (!Net_Overtime) continue;
				
				declare Text1 = Teams[0].ColorText;
				if (Net_ClanDistances.existskey(0) && Net_ClanDistances[0] >= 0.) {
					Text1 ^= Net_ClanDistances[0];
				} else {
					Text1 ^= "N/A";
				}
				Label_Team1.Value = Text1;
				
				declare Text2 = Teams[1].ColorText;
				if (Net_ClanDistances.existskey(1) && Net_ClanDistances[1] >= 0.) {
					Text2 ^= Net_ClanDistances[1]^"m";
				} else {
					Text2 ^= "N/A";
				}
				Label_Team2.Value = Text2;
			}
		}
		--></script>
		<frame id="Frame_CampZone" hidden="1">
			<label id="Label_CampZone" posn="0 -9" translate="1" textsize="1" textprefix="$o" style="TextTitle2Blink" halign="center" valign="center2"/>
		</frame>
		<frame id="Frame_Overtime" hidden="1">
			<label posn="0 66 40" text="Overtime!" translate="1" textprefix="$s$o" textsize="3" halign="center" valign="center2"/>
			<label posn="0 60 30" text=":Distances:" translate="1" textprefix="$s" textsize="2" halign="center" valign="center2"/>
			<label id="Label_Team1" posn="-11 60 30" textprefix="$s" textsize="2" halign="right" valign="center2"/>
			<label id="Label_Team2" posn="11 60 30" textprefix="$s" textsize="2" halign="left" valign="center2"/>
		</frame>""";
	return Manialink;
}

// Check if the given player is in a camp zone
Boolean IsInCampZone(CSmPlayer _Player) {
	if (!S_EnableCampZone || _Player == Null) return False;
	if (_Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned) return False;
	if (_Player.StartTime + 1000 > Now) return False;
	if (G_ClanPoles.existskey(_Player.CurrentClan) && BlockPoles.existskey(G_ClanPoles[_Player.CurrentClan])) {
		declare DistancePole = MathLib::Distance(_Player.Position, BlockPoles[G_ClanPoles[3 - _Player.CurrentClan]].Position);
		if (DistancePole <= C_DefaultCampZoneRadius) return True;
	}
	if (G_ClanSpawns.existskey(_Player.CurrentClan) && BlockSpawns.existskey(G_ClanSpawns[_Player.CurrentClan])) {
		declare DistanceSpawn = MathLib::Distance(_Player.Position, BlockSpawns[G_ClanSpawns[_Player.CurrentClan]].Position);
		if (DistanceSpawn <= C_DefaultCampZoneRadius) return True;
	}
	return False;
}

// Update damage top
Void UpdateDamage(CSmPlayer _Player, Integer _Damage) {
	if (_Player == Null) return;
	declare Top_Damage for _Player = 0;
	if (_Damage == 0) {
		Top_Damage = _Damage;
	} else {
		declare Dmg = _Damage / 100;
		Top_Damage += Dmg;
	}
	if (Top_Damage == 0) {
		ScoresTable::SetCustom2(_Player, "");
	} else {
		ScoresTable::SetCustom2(_Player, TextLib::ToText(Top_Damage));
		Top::SetRecord(_Player, T_Damage, TextLib::ToText(Top_Damage), -Top_Damage);
	}
}

// Update captures top
Void UpdateCaptures(CSmPlayer _Player, Integer _Captures) {
	if (_Player == Null) return;
	declare Top_Captures for _Player = 0;
	if (_Captures == 0) {
		Top_Captures = _Captures;
	} else {
		Top_Captures += _Captures;
	}
	if (Top_Captures == 0) {
		ScoresTable::SetCustom3(_Player, "");
	} else {
		ScoresTable::SetCustom3(_Player, TextLib::ToText(Top_Captures));
		Top::SetRecord(_Player, T_Captures, TextLib::ToText(Top_Captures), -Top_Captures);
	}
}

// Update backstabber top
Void UpdateBackStabber(CSmPlayer _Player, Integer _Damage) {
	if (_Player == Null) return;
	declare Top_BackStabber for _Player = 0;
	if (_Damage == 0) {
		Top_BackStabber = _Damage;
	} else {
		declare Dmg = _Damage / 100;
		Top_BackStabber += Dmg;
	}
	if (Top_BackStabber == 0) {
	} else {
		Top::SetRecord(_Player, T_BackStabber, TextLib::ToText(Top_BackStabber), -Top_BackStabber);
	}
}

// Initialize the given player
Void InitPlayer(CSmPlayer _Player, Boolean _Force) {
	if (_Player == Null) return;
	declare Tjost_Init for _Player = True;
	if (!Tjost_Init && !_Force) return;
	Tjost_Init = False;
	
	// Init values
	declare Boolean Backspaced for _Player;
	Backspaced = False;
	
	// Init tops
	UpdateDamage(_Player, 0);
	UpdateCaptures(_Player, 0);
}

// Send message for near miss
Void SendNearMissMessage(CSmModeEvent _Event) {
	// Catch invalid events
	if (_Event == Null || _Event.Type != CSmModeEvent::EType::OnNearMiss) return;
	if (_Event.Shooter == Null || _Event.Victim == Null) return;
	if (_Event.MissDist <= 0. || _Event.MissDist > C_MissMessageMaxDist) return;
	
	// Get message text
	declare Message = "";
	declare Dist = MathLib::NearestInteger(_Event.MissDist * 1000.);
	if (Dist >= 10.) {
		Message = (Dist / 10.)^"cm!";
	} else {
		Dist = MathLib::NearestInteger(_Event.MissDist * 10000.);
		if (Dist >= 10.) {
			Message = (Dist / 10.)^"mm!";
		} else {
			Dist = MathLib::NearestInteger(_Event.MissDist * 10000000.);
			Message = (Dist / 10.)^"µm!";
		}
	}
	Message = TextLib::Compose(_("You missed %1 by %2"), Tools::GetColorizedPlayerName(_Event.Victim), Message);
	
	// Send message
	Message::SendStatusMessage(_Event.Shooter, Message, 2500, 0);
}
