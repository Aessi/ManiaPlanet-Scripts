/****************************************
*	Tjost2 Game Mode					*
*	Author:		steeffeen				*
*	Contact:	schteffens@gmail.com	*
****************************************/

/*
TODO:
*/

#Extends "Modes/ShootMania/ModeBase.Script.txt"

#Const	CompatibleMapTypes	"Tjost2Arena,ChaseArena"
#Const	Version				"0.0.1 (2013-04-08)"

#Const	Description			"Get to several capture points the fastest while shooting your opponents."

/* INCLUDES */
#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Interface.Script.txt" as Interface
#Include "Libs/Nadeo/Top.Script.txt" as Top
#Include "Libs/Nadeo/Victory.Script.txt" as Victory
#Include "Libs/Nadeo/ShootMania/AFK.Script.txt" as AFK
#Include "Libs/Nadeo/ShootMania/Score.Script.txt" as Score
#Include "Libs/Nadeo/ShootMania/SM.Script.txt" as SM
#Include "Libs/Nadeo/ShootMania/SpawnScreen.Script.txt" as SpawnScreen

/* SETTINGS */
// Match
#Setting	S_GoalTimeLimit		180		as _("Time limit per goal (seconds)")
#Setting	S_RoundToWin		10		as _("Points to win a map")
#Setting	S_RoundsGap			2		as _("Points gap to win a map")
#Setting	S_RoundsLimit		25		as _("Points limit per map (first team reaching X wins)")
// Gameplay
#Setting	S_FriendlyFire		False	as _("Enable Friendly Fire")

/* CONSTANTS */
#Const	C_ManageAFKPlayers		True	// Force afk players into spec
// UI
#Const	C_UIUpdateInterval		240		// Time between UI updates
#Const	C_HideStuffAtMapEnd		True	// Enable to hide mode widgets at map end
#Const	C_UseTops				True	// Enable/disable top x rankings
// Gameplay
#Const	C_FinalGoalExtraTime	60000	// Additional time for capturing the final goal (milliseconds)
#Const	C_PoleGaugeMax			5000	// Maximal value of poles (final goal takes X milliseconds to be captured)
// Clublink constants
#Const	C_UsePlayerClublinks	True	// Enable use of player clublinks
#Const	C_NeutralEmblemUrl		""		// Neutral emblem URL
// Top ranking names
#Const	T_Damage				"Damage"
#Const	T_Captures				"Captures"
#Const	T_Backstabber			"Backstabber"

/* GLOBALES */
declare Integer G_CurrentGoalNumber;	// Number of current goal
declare Integer G_NextSpawnTime;		// Time when then players spawn next
declare Ident[Integer] G_Spawns;		// Ids of the spawns
declare Ident[Integer] G_Goals;			// Ids of the goal posts
declare Ident G_FinalGoalId;			// Id of the final goal post
declare Integer G_LastAfkHandling;		// Time of last afk players handling
declare Integer G_LastUIUpdate;			// Time of last UI update
declare Integer G_LastStatusMessage;	// Time of last status message
// Cache
declare Boolean Cache_S_FriendlyFire;	// Cache for S_FriendlyFire

/*****************************************************
	EXTENSIONS
*****************************************************/
***StartServer***
***
log("Tjost2.Script.txt loaded!");
log("Version: "^Version);

// Script variables
UseClans = True;
MB_UseSectionRound = True;

G_LastUIUpdate = 0;
G_LastAfkHandling = 0;
G_LastStatusMessage = 0;

// Clublinks
MB_UsePlayerClublinks = C_UsePlayerClublinks;
MB_NeutralEmblemUrl = C_NeutralEmblemUrl;

// Cache
Cache_S_FriendlyFire = S_FriendlyFire;

// UI
SM::SetupDefaultVisibility();
UIManager.UIAll.OverlayScoreSummary = True;
// Hide map warnings to suppress the "Pole captured by X" message
UIManager.UIAll.NoticesFilter_HideMapWarning = True;

// Tops
if (C_UseTops) {
	Top::AddTop(T_Damage, 5);
	Top::AddTop(T_Captures, 5);
	Top::AddTop(T_Backstabber, 5);
}

// Rules layer
CreateRules();

// Team layer
declare TeamsLayer <=> UIManager.UILayerCreate();
Interface::SetLayerTeams(TeamsLayer);
UIManager.UIAll.UILayers.add(TeamsLayer);
// Tops layer
declare TopsLayer <=> UIManager.UILayerCreate();
UIManager.UIAll.UILayers.add(TopsLayer);
// Utitility layer
declare UtilityLayer <=> UIManager.UILayerCreate();
UtilityLayer.ManialinkPage = GetUtilityLayer();
UIManager.UIAll.UILayers.add(UtilityLayer);
// Markers Layer
declare MarkersLayer <=> UIManager.UILayerCreate();
MarkersLayer.Type = CUILayer::EUILayerType::Markers;
UIManager.UIAll.UILayers.add(MarkersLayer);
***

***StartMap***
***
XmlRpc.SendCallback("beginMap", "");

UIManager.UIAll.SendNotice(
	"New Match", CUIConfig::ENoticeLevel::MatchInfo, 
	Null, CUIConfig::EAvatarVariant::Default, 
	CUIConfig::EUISound::StartMatch, 0);

// Prepare map
G_Spawns.clear();
G_Goals.clear();
G_FinalGoalId = NullId;
foreach (Base in Bases) {
	Base.Clan = 0;
	Base.IsActive = True;
}
foreach (Spawn in BlockSpawns) {
	G_Spawns[Spawn.Order] = Spawn.Id;
}
foreach (Pole in BlockPoles) {
	if (Pole.Order == BlockPoles.count) {
		G_FinalGoalId = Pole.Id;
	} else {
		G_Goals[Pole.Order] = Pole.Id;
	}
	Pole.Gauge.Clan = 0;
	Pole.Gauge.Max = C_PoleGaugeMax;
}
MarkersLayer.ManialinkPage = GetMarkersLayerManialink();

// Prepare match
Score::MatchBegin();
Top::MatchBegin();
Top::RoundBegin();
Victory::MatchBegin();
for (Clan, 1, 2) {
	ClanScores[Clan] = 0;
}
Mode::Ladder_OpenMatch_All();

// UI
TeamsLayer.IsVisible = True;
TopsLayer.IsVisible = True;
UtilityLayer.IsVisible = True;
MarkersLayer.IsVisible = True;
***

***StartRound***
***
XmlRpc.SendCallback("beginRound", "");

UIManager.UIAll.BigMessage = "";

Score::RoundBegin();
Victory::RoundBegin();

if (C_UsePlayerClublinks) {
	Clublink::DefineTeamAuto();
}
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;

// Prepare next round
PrepareNextRound();
PrepareNextGoalRun();
***

***PlayLoop***
***
// Check mode settings
CheckModeSettings();
// Handle afk players
if (C_ManageAFKPlayers && G_LastAfkHandling + 10000 < Now && StartTime + 10000 < Now) {
	G_LastAfkHandling = Now;
	AFK::ManageAFKPlayers();
}

// Perform actions for each player
foreach (Player in Players) {
	switch (Player.SpawnStatus) {
		case CSmPlayer::ESpawnStatus::NotSpawned: {
			MySpawnPlayer(Player);
		}
		case CSmPlayer::ESpawnStatus::Spawned: {
			if (Player.CurrentClan != Player.RequestedClan || Player.RequestsSpectate) {
				// Player wants to change team or spectate
				UnspawnPlayer(Player);
			} else {
				// Check for captures
				if (Player.BlockPole != Null && G_Goals.existskey(G_CurrentGoalNumber) && Player.BlockPole.Id == G_Goals[G_CurrentGoalNumber]) {
					Player.BlockPole.Gauge.ValueReal = 1.0;
					Player.BlockPole.Gauge.Speed = C_PoleGaugeMax;
				}
			}
		}
	}
}

// Handle events
foreach (Event in PendingEvents) {
	switch (Event.Type) {
		case CSmModeEvent::EType::OnCapture: {
			if (Event.BlockPole.Id == G_FinalGoalId) {
				// Final goal captured!
				declare CapturerId = NullId;
				foreach (PlayerId in Event.BlockPole.Sector.PlayersIds) {
					if (Players.existskey(PlayerId)) {
						Score::AddPoints(Players[PlayerId], 5);
						CapturerId = PlayerId;
					}
				}
				if (CapturerId != NullId && Teams.existskey(Players[CapturerId].CurrentClan-1)) {
					if (!Players[CapturerId].IsFakePlayer) {
						XmlRpc.SendCallback("poleCapture", Players[CapturerId].Login);
						Top::IncrementPlayerPoints(T_Captures, Players[CapturerId], 1);
					}
					UIManager.UIAll.SendNotice(
						"""$<{{{Players[CapturerId].Name}}}$> captured the $<{{{Teams[Players[CapturerId].CurrentClan-1].ColorText}}}Final Goal$>!""", CUIConfig::ENoticeLevel::MatchInfo, 
						Null, CUIConfig::EAvatarVariant::Default, 
						CUIConfig::EUISound::Capture, 0);
				}
				Victory::SetRoundWinnerIfNoWinner(Event.BlockPole.Gauge.Clan);
				PassOn(Event);
			} else {
				if (G_Goals.existskey(G_CurrentGoalNumber) && Event.BlockPole.Id == G_Goals[G_CurrentGoalNumber]) {
					// Another goal captured!
					declare CapturerId = NullId;
					foreach (PlayerId in Event.BlockPole.Sector.PlayersIds) {
						if (Players.existskey(PlayerId)) {
							Score::AddPoints(Players[PlayerId], 3);
							CapturerId = PlayerId;
						}
					}
					if (CapturerId != NullId && Teams.existskey(Players[CapturerId].CurrentClan-1)) {
						Event.BlockPole.Gauge.Clan = Players[CapturerId].CurrentClan;
						Event.BlockPole.Base.Clan = Players[CapturerId].CurrentClan;
						if (!Players[CapturerId].IsFakePlayer) {
							XmlRpc.SendCallback("poleCapture", Players[CapturerId].Login);
							Top::IncrementPlayerPoints(T_Captures, Players[CapturerId], 1);
						}
						ClanScores[Players[CapturerId].CurrentClan] += 1;
						UIManager.UIAll.SendNotice(
							"""$<{{{Players[CapturerId].Name}}}$> captured the $<{{{Teams[Players[CapturerId].CurrentClan-1].ColorText}}}{{{G_CurrentGoalNumber}}}. Goal$>!""", CUIConfig::ENoticeLevel::MatchInfo, 
							Null, CUIConfig::EAvatarVariant::Default, 
							CUIConfig::EUISound::Capture, 0);
					}
					PassOn(Event);
					PrepareNextGoalRun();
				} else {
					Discard(Event);
				}
			}
		}
		case CSmModeEvent::EType::OnPlayerRequestRespawn: {
			// Respawn player with or without (?) new random weapon
			MySpawnPlayer(Event.Player);
			if (!Event.Player.IsFakePlayer) {
				XmlRpc.SendCallback("playerRespawn", Event.Player.Login);
			}
			Discard(Event);
		}
		case CSmModeEvent::EType::OnArmorEmpty: {
			if (Event.Shooter == Null) {
				// AFK check with last death position
				if (C_ManageAFKPlayers) {
					declare Vec3 LastDeathPosition for Event.Victim;
					if (LastDeathPosition == Event.Victim.Position) {
						// Died on same spot - Afk! - Switch to spec
						declare UI <=> UIManager.GetUI(Event.Victim);
						if (UI != Null) {
							UI.SendNotice(
								"You are inactive! Switching to spec...", CUIConfig::ENoticeLevel::Default, 
								Null, CUIConfig::EAvatarVariant::Default, 
								CUIConfig::EUISound::Silence, 0);
						}
						This.Users_RequestSwitchToSpectator(Event.Victim.User);
					} else {
						// Not afk - Save position for next check
						LastDeathPosition = Event.Victim.Position;
					}
				}
			}
						
			if (!Event.Victim.IsFakePlayer) {
				if (Event.Shooter != Null && !Event.Shooter.IsFakePlayer) {
					XmlRpc.SendCallback("playerKill", "Victim:"^Event.Victim.Login^";Shooter:"^Event.Shooter.Login^";");
				}
				XmlRpc.SendCallback("playerDeath", Event.Victim.Login);
			}
			PassOn(Event);
		}
		case CSmModeEvent::EType::OnHit: {
			if (Event.Shooter == Null || Event.Victim == Null ) {
				// Discard buggy event
				Discard(Event);
			} else {
				// Reduce damage to 1
				Event.Damage = 100;
				if (Event.Shooter == Event.Victim) {
					// Discard self hit
					Discard(Event);
				} else {
					// Kill victim if it hasn't at least 2 armor
					if (Event.Victim.Armor < 200) {
						Event.Damage = Event.Victim.Armor;
					}
					// Grant points
					declare Points = 1;
					// Negative points for team hits
					if (Event.Shooter.CurrentClan == Event.Victim.CurrentClan) {
						if (!S_FriendlyFire) {
							Discard(Event);
							continue;
						}
						Points *= -1;
						if (!Event.Shooter.IsFakePlayer) {
							Top::IncrementPlayerPoints(T_Backstabber, Event.Shooter, 1);
						}
					} else {
						if (!Event.Shooter.IsFakePlayer) {
							Top::IncrementPlayerPoints(T_Damage, Event.Shooter, 1);
						}
					}
					Event.ShooterPoints = Points;
					Score::AddPoints(Event.Shooter, Points);
					if (!Event.Shooter.IsFakePlayer && !Event.Victim.IsFakePlayer) {
						XmlRpc.SendCallback("playerHit", "Victim:"^Event.Victim.Login^";Shooter:"^Event.Shooter.Login^";"^Points);
					}
					PassOn(Event);
				}
			}
		}
		default: {
			PassOn(Event);
		}
	}
}

// Check for final capture
if (G_CurrentGoalNumber == G_Goals.count + 1 && BlockPoles.existskey(G_FinalGoalId)) {
	declare Pole <=> BlockPoles[G_FinalGoalId];
	Pole.Gauge.Speed = 0;
	
	if (Pole.Gauge.ValueReal == 0.0) {
		Pole.Gauge.Clan = 0;
	}
	
	declare Speed = [1 => 0, 2 => 0];
	foreach (PlayerId in Pole.Sector.PlayersIds) {
		if (Players.existskey(PlayerId)) {
			Speed[Players[PlayerId].CurrentClan] += 1;
		}
	}
	switch (Pole.Gauge.Clan) {
		case 0: {
			// Pole is not yet captured
			for (Clan, 1, 2) {
				if (Speed[Clan] > Speed[3-Clan]) {
					// Clan started capturing the pole
					Pole.Gauge.Clan = Clan;
					Pole.Gauge.Speed = Speed[Clan];
					break;
				}
			}
		}
		default: {
			// Pole has been captured partly
			if (Speed[Pole.Gauge.Clan] > Speed[3-Pole.Gauge.Clan]) {
				// Pole gets captured further
				Pole.Gauge.Speed = Speed[Pole.Gauge.Clan];
			} else {
				if (Speed[3-Pole.Gauge.Clan] > Speed[Pole.Gauge.Clan]) {
					// Pole gets decaptured
					Pole.Gauge.Speed = -Speed[3-Pole.Gauge.Clan];
				}
			}
		}
	}
}

// UI updates
if (G_LastUIUpdate + C_UIUpdateInterval < Now) {
	G_LastUIUpdate = Now;
	
	// Score summary
	UpdateScoreSummary();
	
	// Clear status message
	if (G_LastStatusMessage > 0 && Now > G_LastStatusMessage + 5000) {
		G_LastStatusMessage = 0;
		UIManager.UIAll.StatusMessage = "";
	}
	
	// Top rankings
	if (C_UseTops) {
		declare Position = "129 -30";
		declare TopNb = 2;
		if (S_FriendlyFire) {
			TopNb += 1;
		}
		switch (((Now - StartTime) / 7000) % TopNb) {
			case 0: {
				TopsLayer.ManialinkPage = GetFrameTop(T_Damage, Position);
			}
			case 1: {
				TopsLayer.ManialinkPage = GetFrameTop(T_Captures, Position);
			}
			case 2: {
				TopsLayer.ManialinkPage = GetFrameTop(T_Backstabber, Position);
			}
		}
	}
}

// Round end conditions
if (Now >= EndTime) {
	if (G_CurrentGoalNumber <= G_Goals.count) {
		// Skip the current goal
		PrepareNextGoalRun();
		UIManager.UIAll.StatusMessage = "Nobody reached the goal: Next!";
		G_LastStatusMessage = Now;
	} else {
		// Round draw
		Victory::SetRoundDrawIfNoWinner();
	}
}
if (!Victory::NoRoundWinner()) {
	MB_StopRound = True;
}
***

***EndRound***
***
XmlRpc.SendCallback("endRound", GetRankings());

SM::UnspawnAllPlayers();
StartTime = -1;
UIManager.UIAll.CountdownEndTime = -1;
EndTime = -1;

if (Victory::IsRoundDraw()) {
	UIManager.UIAll.BigMessage = "Round Draw!";
} else {
	for (Clan, 1, 2) {
		if (Victory::IsRoundWinner(Clan)) {
			UIManager.UIAll.BigMessage = """$<{{{Teams[Clan-1].ColorizedName}}}$> wins the round!""";
			ClanScores[Clan] += 2;
			break;
		}
	}
}

UpdateScoreSummary();
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;

// Show all top lists
if (C_UseTops) {
	declare Manialink = "";
	Manialink =	GetFrameTop(T_Damage, "129 40") ^
				GetFrameTop(T_Captures, "129 5");
	if (S_FriendlyFire) {
		Manialink ^= GetFrameTop(T_Backstabber, "129 -30");
	}
	TopsLayer.ManialinkPage = Manialink;
}

MB_Sleep(2500);

Score::RoundEnd();
Victory::RoundEnd();

// Match end conditions
Victory::SetMatchWinnerFromScore(S_RoundToWin, S_RoundsGap, S_RoundsLimit);
if (!Victory::NoMatchWinner()) {
	MB_StopMap = True;
	
	for (Clan, 1, 2) {
		if (Victory::IsMatchWinner(Clan)) {
			UIManager.UIAll.BigMessage = """$<{{{Teams[Clan-1].ColorizedName}}}$> wins the map!""";
			MB_Sleep(1000);
			break;
		}
	}
}
***

***EndMap***
***
XmlRpc.SendCallback("endMap", GetRankings());

Score::MatchEnd();
Top::RoundEnd();
Top::MatchEnd();
Victory::MatchEnd();
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;

// UI
if (C_HideStuffAtMapEnd) {
	TeamsLayer.IsVisible = False;
	TopsLayer.IsVisible = False;
	UtilityLayer.IsVisible = False;
	MarkersLayer.IsVisible = False;
}

MB_Sleep(3500);

Mode::Ladder_CloseMatch();
***

***EndServer***
***
// Clean up
UIManager.UILayerDestroyAll();
***

// Round a given real to fit a given number of decimal places
Real Round(Real _Number, Integer _Places) {
	// Calculate factor
	declare Factor = 10.0;
	for (Index, 2, _Places) {
		Factor *= Factor;
	}
	// Round number
	return MathLib::NearestInteger(_Number * Factor) / Factor;
}

// Get Hud3dMarkers
Text GetHud3dMarkers() {
	if (G_CurrentGoalNumber == G_Goals.count + 1) {
		declare Pole <=> BlockPoles[G_FinalGoalId];
		return """<marker pos="{{{Pole.Position[0]}}} {{{Pole.Position[1]}}} {{{Pole.Position[2]}}}" manialinkframeid="Frame_GoalMarker" box="0 6 0"/>""";
	} else {
		if (G_Goals.existskey(G_CurrentGoalNumber)) {
			declare Pole <=> BlockPoles[G_Goals[G_CurrentGoalNumber]];
			return """<marker pos="{{{Pole.Position[0]}}} {{{Pole.Position[1]}}} {{{Pole.Position[2]}}}" manialinkframeid="Frame_GoalMarker" box="0 6 0"/>""";
		}
	}
	return "";
}

// Get manialink for MarkersLayer
Text GetMarkersLayerManialink() {
	declare Manialink = """
		<script><!--
			main() {
				declare Label_GoalMarker <=> (Page.GetFirstChild("Label_GoalMarker") as CMlLabel);
				declare Label_FinalGoalMarker <=> (Page.GetFirstChild("Label_FinalGoalMarker") as CMlLabel);
				
				declare LastUIUpdate = 0;
				
				while (True) {
					yield;
					
					if (LastUIUpdate + 200 < Now) {
						LastUIUpdate = Now;
											
						// Update goal markers
						Label_GoalMarker.Value = "Goal";
						Label_FinalGoalMarker.Value = "Final Goal";
					}
				}
			}
		--></script>
		<frame id="Frame_GoalMarker" hidden="1">
			<label id="Label_GoalMarker" posn="0 4" textsize="2" scale="0.8" halign="center" valign="center2"/>
			<quad posn="0 4" sizen="12 4" halign="center" valign="center" style="BgsPlayerCard" substyle="BgMediaTracker"/>
		</frame>
		<frame id="Frame_FinalGoalMarker" hidden="1">
			<label id="Label_FinalGoalMarker" posn="0 4" textsize="2" scale="0.8" halign="center" valign="center2"/>
			<quad posn="0 4" sizen="12 4" halign="center" valign="center" style="BgsPlayerCard" substyle="BgMediaTracker"/>
		</frame>
		""";
	return Manialink;
}

// Prepare map and blocks for the next round
Void PrepareNextRound() {
	// VALUES
	G_CurrentGoalNumber = 0;
	
	// POLES
	// Assign team & values
	foreach (PoleId in G_Goals) {
		BlockPoles[PoleId].Base.Clan = 0;
		BlockPoles[PoleId].Gauge.Clan = 0;
		BlockPoles[PoleId].Gauge.Speed = 0;
		BlockPoles[PoleId].Gauge.Value = C_PoleGaugeMax-1;
	}
	BlockPoles[G_FinalGoalId].Base.Clan = 0;
	BlockPoles[G_FinalGoalId].Gauge.Clan = 0;
	BlockPoles[G_FinalGoalId].Gauge.Speed = 0;
	BlockPoles[G_FinalGoalId].Gauge.Value = 0;
	
	// SPAWNS
	// Switch sides
	declare Index = 1;
	while (Index < G_Spawns.count) {
		declare Temp = G_Spawns[Index];
		G_Spawns[Index] = G_Spawns[Index+1];
		G_Spawns[Index+1] = Temp;
		Index += 2;
	}
	// Assign teams
	foreach (Order => SpawnId in G_Spawns) {
		BlockSpawns[SpawnId].Base.Clan = 2 - (Order % 2);
	}
}

// Prepare values for the run to the next goal
Void PrepareNextGoalRun() {
	SM::UnspawnAllPlayers();
	Mode::Synchro_DoBarrier();
	
	// Increase current goal number
	G_CurrentGoalNumber += 1;
	
	// Update Hud3dMarkers
	UIManager.UIAll.Hud3dMarkers = GetHud3dMarkers();
	
	// Set times
	StartTime = Now + 5000;
	G_NextSpawnTime = StartTime;
	EndTime = StartTime + S_GoalTimeLimit * 1000;
	if (G_CurrentGoalNumber > G_Goals.count) {
		EndTime += C_FinalGoalExtraTime;
	}
}

// Spawn the given player and perform necessary actions
Void MySpawnPlayer(CSmPlayer _Player) {
	// Unspawn player
	This.UnspawnPlayer(_Player);

	if (!_Player.RequestsSpectate) {
		// Spawn player
		declare SpawnIndex = _Player.RequestedClan + 2 * (G_CurrentGoalNumber - 1);
		SM::SpawnPlayer(_Player, _Player.RequestedClan, BlockSpawns[G_Spawns[SpawnIndex]], G_NextSpawnTime);
	}
}

// Create rules layer shown in the spawn
Void CreateRules() {
	SpawnScreen::DestroyRules();
	
	declare Rules = """
Get to the checkpoints the fastest while shooting your opponents.
""";
	if (S_FriendlyFire) {
		Rules ^= """
		
- $<$f80Friendly Fire$> Active: Pay attention to not damage your team mates!""";
	}
	
	SpawnScreen::CreateRules("Tjost2", Rules, True);
	SpawnScreen::AttachRules();
}

// Check for changed script settings
Void CheckModeSettings() {
	declare UpdateRules = False;
	
	// Friendly Fire
	if (Cache_S_FriendlyFire != S_FriendlyFire) {
		Cache_S_FriendlyFire = S_FriendlyFire;
		// Announce change
		if (S_FriendlyFire) {
			UIManager.UIAll.SendChat("$<$f80Friendly Fire$> is now $<$0f0actived$>!");
		} else {
			UIManager.UIAll.SendChat("$<$f80Friendly Fire$> is now $<$f00deactived$>!");
		}
		UpdateRules = True;
	}
	
	if (UpdateRules) {
		// Update rules
		CreateRules();
	}
}

// Update the score summary at the top
Void UpdateScoreSummary() {
	declare PlayerClan1Id = NullId;
	declare PlayerClan2Id = NullId;
	foreach (Player in Players) {
		if (Player.CurrentClan == 1 && (PlayerClan1Id == NullId || Player.User.ClubLink != "" && Players[PlayerClan1Id].User.ClubLink == "")) {
			PlayerClan1Id = Player.Id;
		} else {
			if (Player.CurrentClan == 2 && (PlayerClan2Id == NullId || Player.User.ClubLink != "" && Players[PlayerClan2Id].User.ClubLink == "")) {
				PlayerClan2Id = Player.Id;
			} else {
				if (PlayerClan1Id != NullId && PlayerClan2Id != NullId) {
					break;
				}
			}
		}
	}
	if (PlayerClan1Id != NullId && PlayerClan2Id != NullId) {
		UIManager.UIAll.OverlayScoreSummary = True;
		UIManager.UIAll.ScoreSummary_Player1 = PlayerClan1Id;
		UIManager.UIAll.ScoreSummary_Points1 = ClanScores[1];
		UIManager.UIAll.ScoreSummary_Player2 = PlayerClan2Id;
		UIManager.UIAll.ScoreSummary_Points2 = ClanScores[2];
	} else {
		UIManager.UIAll.OverlayScoreSummary = False;
	}
}

// Get utility layer (showing goal capture bar and stuff)
Text GetUtilityLayer() {
	declare Manialink = """<script><!--
			#Include "MathLib" as MathLib
			
			main() {
				declare Label_CapText <=> (Page.GetFirstChild("CapText") as CMlLabel);
				declare Gauge_CapGauge <=> (Page.GetFirstChild("CapGauge") as CMlGauge);
				
				declare LastUIUpdate = 0;
				
				while (True) {
					yield;
					
					if (LastUIUpdate + 300 < Now) {
						LastUIUpdate = Now;
						
						// Capturing gauge
						if (InputPlayer != Null) {
							declare CSmPlayer GaugePlayer <=> Null;
							if (False && GUIPlayer != Null) {
								GaugePlayer <=> GUIPlayer;
							} else {
								GaugePlayer <=> InputPlayer;
							}
							if (GaugePlayer != Null && GaugePlayer.BlockPole != Null) {
								Label_CapText.Visible = True;
								Gauge_CapGauge.Visible = True;
								
								Label_CapText.Value = MathLib::NearestInteger(GaugePlayer.BlockPole.Gauge.ValueReal*100)^"%";
								Gauge_CapGauge.SetRatio(GaugePlayer.BlockPole.Gauge.ValueReal);
								Gauge_CapGauge.SetClan(GaugePlayer.BlockPole.Gauge.Clan);
							} else {
								Label_CapText.Visible = False;
								Gauge_CapGauge.Visible = False;
							}
						}
					}
				}
			}
		--></script>
		<frame>
			<label id="CapText" textprefix="$o" scale="2" posn="0 -25" hidden="1" halign="center" valign="center"/>
			<gauge id="CapGauge" posn="0 -35" sizen="110 8" style="EnergyBar" hidden="1" halign="center" valign="center"/>
		</frame>""";
	return Manialink;
}

// Get top frame
Text GetFrameTop(Text _TopIdent, Text _Pos) {
	declare Title = """Top 5 {{{_TopIdent}}}""";
	declare UnitType = "";
	switch (_TopIdent) {
		case T_Backstabber: {
			Title = """Flop 5 {{{_TopIdent}}}""";
		}
	}
	return Top::GetFrameTop2(_TopIdent, Title, _Pos, UnitType);
}

// Get current rankings for xml rpc callbacks
Text GetRankings() {
	declare Rankings = "";
	foreach (Score in Scores) {
		Rankings ^= Score.User.Login^":"^Score.Points^";";
	}
	return Rankings;
}
