/************************************************************
*	Obstacle Solo Campaign Script							*
*	Author:		steeffeen									*
*	Contact:	schteffens@gmail.com						*
************************************************************/

#Extends "Modes/ShootMania/Obstacle.Script.txt"

#Const SoloScriptName		"ObstacleSolo.Script.txt"
#Const SoloVersion			"0.1 (2013-05-01)"

// EXTENDS
***LogVersion***
***
MB_LogVersion(SoloScriptName, SoloVersion);
***

***Rules***
***
declare ModeRules = """
- Finish the $<$88fObstacle Course$> as fast as possible.
- To validate a race you must touch the finish after going through all the $<$88fCheckpoints$>.
- You can start over and improve your time as often as you want..
$<$w$66f--------------------------------------------------------------------------------$>
- Press the $<$oRespawn$> button (default: $<$88fBackspace$>) or die to $<$0f0Respawn$> at the last reached checkpoint.
- Press the $<$oGive Up$> button (default: $<$88fDelete$>) to $<$0f0Restart$> from the beginning. (You can also set another restart button at the top.)
$<$w$66f--------------------------------------------------------------------------------$>
- Press $<$f80F4$> to disable/enable respawning at checkpoints.""";
SpawnScreen::CreateRules("$<$w$sObstacle$>", ModeRules);
***

***ScoresTable***
***
ScoresTable::Load();
ScoresTable::SetTableFormat(1, 2);
ScoresTable::SetTableWidth(160.);
ScoresTable::SetTableBackgroundImage("file://Media/Manialinks/ShootMania/Common/topsBg.dds", <0., 43.>, <176., 132.>);
//Pos,Status,Avatar,Name,Spec,Prof,Custom1,Custom2,Custom3,RoundPoints,Points
ScoresTable::SetColumnsWidth(1.5, 1., 2.5, 20., 0.5, 1., 0., 3., 5.5, 0., 0.);
ScoresTable::SetPlayerCardHeight(15.);
ScoresTable::SetHeaderHeight(14.);
ScoresTable::SetColumnName("Custom1", "");
ScoresTable::SetColumnName("Custom2", _("Respawns"));
ScoresTable::SetColumnName("Custom3", _("Progress"));
ScoresTable::SetDefaultCustom1("");
ScoresTable::SetDefaultCustom2("-");
ScoresTable::SetDefaultCustom3("-");
ScoresTable::SetDefaultFooterScore("");
ScoresTable::SetDefaultFooterStats("");
ScoresTable::Build();
***

***LayerUtilities***
***
LayerUtilities.ManialinkPage = CreateSoloLayerUtilities();
***

***Ladder_OpenMatch_All***
***
DoNothing();
***

***SetTimes***
***
StartTime = Now + 3500;
***

***UpdateFooterStats***
***
// Do nothing
if (True) {}
***

***UpdateSoloFooterStats***
***
declare metadata Real ObjectiveAuthor 	for Map;
declare metadata Real ObjectiveGold 	for Map;
declare metadata Real ObjectiveSilver 	for Map;
declare metadata Real ObjectiveBronze 	for Map;

declare FooterStats =	"Gold: "^	GetTime(ObjectiveGold)^		"				"^
						"Silver: "^	GetTime(ObjectiveSilver)^	"				"^
						"Bronze: "^	GetTime(ObjectiveBronze)^	"	";
foreach (Player in Players) {
	ScoresTable::SetFooterStats(Player, FooterStats);
}
***

***CheckTimes***
***
DoNothing();
***

***MedalFromRunNew***
***
if (Players.existskey(0)) {
	declare RunLast as RunNew for Players[0] = -1;
	if (RunNew > 0) {
		declare Time = RunNew / 1000.;
		declare metadata ObjectiveAuthor 	for Map = -1.;
		declare metadata ObjectiveGold 		for Map = -1.;
		declare metadata ObjectiveSilver 	for Map = -1.;
		declare metadata ObjectiveBronze 	for Map = -1.;
		
		if (Time <= ObjectiveAuthor || ObjectiveAuthor < 0) {
			Medal = CMode::EMedal::Author;
			Message = _("You won the Author Medal!");
		} else {
			if (Time <= ObjectiveGold || ObjectiveGold < 0) {
				Medal = CMode::EMedal::Gold;
				Message = _("You won the Gold Medal!");
			} else {
				if (Time <= ObjectiveSilver || ObjectiveSilver < 0) {
					Medal = CMode::EMedal::Silver;
					Message = _("You won the Silver Medal!");
				} else {
					if (Time <= ObjectiveBronze || ObjectiveBronze < 0) {
						Medal = CMode::EMedal::Bronze;
						Message = _("You won the Bronze Medal!");
					} else {
						Medal = CMode::EMedal::Finished;
						Message = _("You finished the Map!");
					}
				}
			}
		}
		This.Solo_SetNewRecord(Players[0].Score, Medal);
	}
}
***

***PlayerFinish***
***
declare RunStartTime for _Player = 0;
declare RunLast for _Player = -1;
declare RunBest for _Player.Score = -1;
declare CheckpointsTimeLast for _Player.Score = Integer[Ident];
declare CheckpointsTimeBest for _Player.Score = Integer[Ident];
declare RespawnCount for _Player = 0;
declare BestRespawnCount for _Player.Score = -1;
declare RunNew = 0;

RunNew = Now - RunStartTime;
RunLast = RunNew;
Chrono::Stop(_Player.Id);
UpdateLayerTimeDiff(_Player, RunNew, RunBest);

// Check best time
if (RunNew < RunBest || RunBest < 0) {
	RunBest = RunNew;
	CheckpointsTimeBest = CheckpointsTimeLast;
	UpdateRanking();
}
// Check best respawns
if (RespawnCount < BestRespawnCount || BestRespawnCount < 0) {
	BestRespawnCount = RespawnCount;
}

UpdateCustom3(_Player);
UpdateFooterScore(_Player);
UpdateLayerInfo(_Player, RunLast, RunBest);

declare UI <=> UIManager.GetUI(_Player);
if (UI != Null) {
	declare Time = TextLib::TimeToText(RunNew, True);
	UI.SendNotice(
		TextLib::Compose(_("Finish: $<%1%2$>"), "$0f0", Time),	
		CUIConfig::ENoticeLevel::PlayerInfo, 
		_Player.User, CUIConfig::EAvatarVariant::Default, 
		CUIConfig::EUISound::Finish, 1);
}
MB_StopMap = True;
***

***StartServer***
***
G_XmlRpcEnabled = False;
UIManager.UIAll.OverlayHideCountdown = True;
UIManager.UIAll.OverlayHideChat = True;
***

***StartMap***
***
---UpdateSoloFooterStats---
***

***ObstacleEndMap***
***
ScoresTable::EndMatch();
foreach (Player in AllPlayers) {
	Chrono::Destroy(Player.Id);
}
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;

// Clean players messages
Message::CleanBigMessages();
Message::CleanStatusMessages();

// Hide ui stuff
LayerMarkers.IsVisible = False;

// Check medal
declare Medal = CMode::EMedal::None;
declare Message = "";
---MedalFromRunNew---

if (Message != "") {
	Message::SendBigMessage(Message, 4000, 4);
}
wait(UIManager.UIAll.UISequenceIsCompleted);
Message::CleanBigMessages();

//MatchEndRequested = True;
//MB_StopMatch = True;
//MB_StopServer = True;
return;
***

// FUNCTIONS
Text GetTime(Real _Objective) {
	if (_Objective > 0) {
		declare Time = MathLib::NearestInteger(_Objective*1000.);
		return TextLib::TimeToText(Time);
	}
	return "--:--";
}

// Create utility layer manialink
Text CreateSoloLayerUtilities() {
	return """<script><!--
		#Include "TextLib" as TextLib
		
		#Const	C_CustomRestartKeys	[	"1900544" => "Delete",	"2555904" => "F3",
										"2686976" => "F5",		"2752512" => "F6",
										"2818048" => "F7",		"2883584" => "F8",
										"2949120" => "F9"	]
		
		main() {
			declare Label_RespawnBehavior <=> (Page.GetFirstChild("Label_RespawnBehavior") as CMlLabel);
			declare Label_Choose <=> (Page.GetFirstChild("Label_Choose") as CMlLabel);
			declare Frame_Options <=> (Page.GetFirstChild("Frame_Options") as CMlFrame);
			
			// Respawn behavior
			declare netwrite Net_RespawnOnCheckpoint for UI = True;
			Label_RespawnBehavior.Value = TextLib::Compose(_("%1Respawning deactivated!"), "$f00");
			
			// Custom restarting
			declare netwrite Net_CustomRestartTime for UI = 0;
			declare OwnCustomRestartKey for UI = "1900544";
			
			declare LastUIUpdate = 0;
			
			while (True) {
				yield;
				
				// Process events
				foreach (Event in PendingEvents) {
					switch (Event.Type) {
						case CMlEvent::Type::KeyPress: {
							switch (Event.CharPressed) {
								case "2621440": {
									// F4 - Change respawn behavior
									Net_RespawnOnCheckpoint = !Net_RespawnOnCheckpoint;
								}
								case OwnCustomRestartKey: {
									// Restart requested
									Net_CustomRestartTime = ArenaNow;
								}
							}
						}
						case CMlEvent::Type::MouseClick: {
							switch (Event.ControlId) {
								case "Label_Choose": {
								}
								default: {
									if (C_CustomRestartKeys.existskey(Event.ControlId)) {
										OwnCustomRestartKey = Event.ControlId;
									}
								}
							}
							Frame_Options.Visible = !Frame_Options.Visible;
						}
					}
				}
				
				if (LastUIUpdate + 300 < Now) {
					LastUIUpdate = Now;
					
					// Respawn behavior
					Label_RespawnBehavior.Visible = !Net_RespawnOnCheckpoint;
					
					// Restart key
					if (C_CustomRestartKeys.existskey(OwnCustomRestartKey)) {
						Label_Choose.Value = "Restart: "^C_CustomRestartKeys[OwnCustomRestartKey];
					} else {
						Label_Choose.Value = _("Choose your own restart key");
					}
				}
			}
		}
	--></script>
	<label id="Label_RespawnBehavior" posn="47 -79" halign="center" valign="bottom" scale="0.6"/>
	<frame posn="0 88">
		<label id="Label_Choose" posn="0 -4" halign="center" valign="center" scale="0.7" style="CardButtonSmall"
			scriptevents="true"/>
		<frame id="Frame_Options" posn="0 -6 99" hidden="1">
			<label id="1900544" posn="0 0" halign="center" valign="top" scale="0.6" style="CardButtonSmall"
				scriptevents="true" text="Delete"/>
			<label id="2555904" posn="0 -5" halign="center" valign="top" scale="0.6" style="CardButtonSmall"
				scriptevents="true" text="F3"/>
			<label id="2686976" posn="0 -9" halign="center" valign="top" scale="0.6" style="CardButtonSmall"
				scriptevents="true" text="F5"/>
			<label id="2752512" posn="0 -13" halign="center" valign="top" scale="0.6" style="CardButtonSmall"
				scriptevents="true" text="F6"/>
			<label id="2818048" posn="0 -17" halign="center" valign="top" scale="0.6" style="CardButtonSmall"
				scriptevents="true" text="F7"/>
			<label id="2883584" posn="0 -21" halign="center" valign="top" scale="0.6" style="CardButtonSmall"
				scriptevents="true" text="F8"/>
			<label id="2949120" posn="0 -25" halign="center" valign="top" scale="0.6" style="CardButtonSmall"
				scriptevents="true" text="F9"/>
		</frame>
	</frame>""";
}

// Dummy method for empty labels
Void DoNothing() {}
