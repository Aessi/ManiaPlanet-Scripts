/****************************************
*	Obstacle Solo Campaign Mode			*
*	Author:		steeffeen				*
*	Contact:	schteffens@gmail.com	*
****************************************/

#Extends "Modes/ShootMania/Obstacle.Script.txt"

#Const SoloScriptName		"ObstacleSolo.Script.txt"
#Const SoloVersion			"0.3 (2013-07-16)"

// EXTENDS
***LogVersion***
***
MB_LogVersion(SoloScriptName, SoloVersion);
***

***Rules***
***
declare ModeRules = """
- Finish the $<$88fObstacle Course$> as fast as possible.
- To validate a race you must touch the finish after going through all the $<$88fCheckpoints$>.
- You can start over and improve your time as often as you want..
$<$w$66f--------------------------------------------------------------------------------$>
- Press the $<$oRespawn$> button (default: $<$88fBackspace$>) or die to $<$0f0Respawn$> at the last reached checkpoint.
- Press the $<$oGive Up$> button (default: $<$88fDelete$>) to $<$0f0Restart$> from the beginning. (You can also set another restart button at the top.)
$<$w$66f--------------------------------------------------------------------------------$>
- Press $<$f80F4$> to disable/enable respawning at checkpoints.""";
SpawnScreen::CreateRules("$<$w$sObstacle$>", ModeRules);
***

***ScoresTable***
***
ScoresTable::Load();
ScoresTable::SetTableFormat(1, 2);
ScoresTable::SetTableWidth(160.);
ScoresTable::SetTableBackgroundImage("file://Media/Manialinks/ShootMania/Common/topsBg.dds", <0., 43.>, <176., 132.>);
//Pos,Status,Avatar,Name,Spec,Prof,Custom1,Custom2,Custom3,RoundPoints,Points
ScoresTable::SetColumnsWidth(1.5, 1., 2.5, 20., 0.5, 1., 0., 3., 5.5, 0., 0.);
ScoresTable::SetPlayerCardHeight(15.);
ScoresTable::SetHeaderHeight(14.);
ScoresTable::SetColumnName("Custom1", "");
ScoresTable::SetColumnName("Custom2", _("Respawns"));
ScoresTable::SetColumnName("Custom3", _("Progress"));
ScoresTable::SetDefaultCustom1("");
ScoresTable::SetDefaultCustom2("-");
ScoresTable::SetDefaultCustom3("-");
ScoresTable::SetDefaultFooterScore("");
ScoresTable::SetDefaultFooterStats("");
ScoresTable::Build();

// Only load tabs (needed for the lib)
Tabs::Load();
***

***Ladder_OpenMatch_All***
***
DoNothing();
***

***SetTimes***
***
StartTime = Now + 3500;
***

***UpdateFooterStats***
***
DoNothing();
***

***UpdateSoloFooterStats***
***
declare metadata Real ObjectiveAuthor 	for Map;
declare metadata Real ObjectiveGold 	for Map;
declare metadata Real ObjectiveSilver 	for Map;
declare metadata Real ObjectiveBronze 	for Map;

declare FooterStats =	"Gold: "^	GetTime(ObjectiveGold)^		"				"^
						"Silver: "^	GetTime(ObjectiveSilver)^	"				"^
						"Bronze: "^	GetTime(ObjectiveBronze)^	"	";
foreach (Player in Players) {
	ScoresTable::SetFooterStats(Player, FooterStats);
}
***

***CheckTimes***
***
DoNothing();
***

***MedalFromRunNew***
***
if (Players.existskey(0)) {
	declare RunLast as RunNew for Players[0] = -1;
	if (RunNew > 0) {
		declare Time = RunNew / 1000.;
		declare metadata ObjectiveAuthor for Map = -1.;
		declare metadata ObjectiveGold  for Map = -1.;
		declare metadata ObjectiveSilver for Map = -1.;
		declare metadata ObjectiveBronze for Map = -1.;
		
		if (Time <= ObjectiveAuthor && ObjectiveAuthor > 0) {
			Medal = CMode::EMedal::Author;
			Message = _("You won the Author Medal!");
		} else {
			if (Time <= ObjectiveGold && ObjectiveGold > 0) {
				Medal = CMode::EMedal::Gold;
				Message = _("You won the Gold Medal!");
			} else {
				if (Time <= ObjectiveSilver && ObjectiveSilver > 0) {
					Medal = CMode::EMedal::Silver;
					Message = _("You won the Silver Medal!");
				} else {
					if (Time <= ObjectiveBronze && ObjectiveBronze > 0) {
						Medal = CMode::EMedal::Bronze;
						Message = _("You won the Bronze Medal!");
					} else {
						Medal = CMode::EMedal::Finished;
						Message = _("You finished the Map!");
					}
				}
			}
		}
		This.Solo_SetNewRecord(Players[0].Score, Medal);
	}
}
***

***PlayerFinish***
***
declare netwrite Net_StartTime for _Player = 0;
declare RunLast for _Player = -1;
declare RunBest for _Player.Score = -1;
declare CheckpointsTimeLast for _Player.Score = Integer[Ident];
declare CheckpointsTimeBest for _Player.Score = Integer[Ident];
declare RespawnCount for _Player = 0;
declare BestRespawnCount for _Player.Score = -1;
declare RunNew = 0;

RunNew = Now - Net_StartTime;
RunLast = RunNew;
UpdateLayerTimeDiff(_Player, RunNew, RunBest);

// Check best time
if (RunNew < RunBest || RunBest < 0) {
	RunBest = RunNew;
	CheckpointsTimeBest = CheckpointsTimeLast;
	UpdateRanking();
}
// Check best respawns
if (RespawnCount < BestRespawnCount || BestRespawnCount < 0) {
	BestRespawnCount = RespawnCount;
}

Net_StartTime = 0;
UpdateCustom3(_Player);
UpdateFooterScore(_Player);
UpdateLayerInfo(_Player, RunLast, RunBest);

declare UI <=> UIManager.GetUI(_Player);
if (UI != Null) {
	declare Time = TextLib::TimeToText(RunNew, True);
	UI.SendNotice(
		TextLib::Compose(_("Finish: $<%1%2$>"), "$0f0", Time),	
		CUIConfig::ENoticeLevel::PlayerInfo, 
		_Player.User, CUIConfig::EAvatarVariant::Default, 
		CUIConfig::EUISound::Finish, 1);
}

// Send result
declare CHttpRequest Request for _Player <=> Null;
if (Request != Null) Http.Destroy(Request);
if (Http.SlotsAvailable > 0) {
	declare Result = "?now="^TextLib::URLEncode(TextLib::ToText(Now));
	Result ^= "&mapname="^TextLib::URLEncode(This.Map.MapInfo.Name);
	Result ^= "&authorlogin="^TextLib::URLEncode(This.Map.MapInfo.AuthorLogin);
	Result ^= "&path="^TextLib::URLEncode(This.Map.MapInfo.Path);
	Result ^= "&playerlogin="^TextLib::URLEncode(_Player.Login);
	Result ^= "&time="^TextLib::URLEncode(TextLib::ToText(RunNew));
	Result ^= "&respawns="^TextLib::URLEncode(TextLib::ToText(RespawnCount));
	Request = Http.CreateGet("http://www.team-devota.com/steeffeen/records/record.php"^Result);
}

MB_StopMap = True;
***

***InitServer***
***
G_IsSolo = True;
***

***StartServer***
***
UIManager.UIAll.OverlayHideCountdown = True;
UIManager.UIAll.OverlayHideChat = True;
***

***StartMap***
***
---UpdateSoloFooterStats---
***

***ObstacleEndMap***
***
ScoresTable::EndMatch();
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;

// Clean players messages
Message::CleanBigMessages();
Message::CleanStatusMessages();

// Hide ui stuff
LayerMarkers.IsVisible = False;

// Check medal
declare Medal = CMode::EMedal::None;
declare Message = "";
---MedalFromRunNew---
if (Message != "") {
	Message::SendBigMessage(Message, 4000, 4);
}

MB_Sleep(5000);
Message::CleanBigMessages();

//MatchEndRequested = True;
//MB_StopMatch = True;
//MB_StopServer = True;
return;
***

// FUNCTIONS
Text GetTime(Real _Objective) {
	if (_Objective > 0) {
		declare Time = MathLib::NearestInteger(_Objective*1000.);
		return TextLib::TimeToText(Time);
	}
	return "--:--";
}
