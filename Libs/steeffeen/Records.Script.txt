/********************************************
*	Records Library							*
*	Author:		steeffeen					*
*	Contact:	schteffens@gmail.com		*
*											*
*	Submits player times to the central		*
*	Obstacle World Records Server.			*
********************************************/

#Include "TextLib" as TextLib

/***************************************
	CONSTANTS
***************************************/

#Const	Version				"2013-09-08"
#Const	ScriptName			"Records.Script.txt"

#Const	C_AuthCode			"sdnfg3849g3jk4gn34g93i4gnshkjdnf23asdfn"
#Const	C_MapCode			"sdbhfnsdfgn87dfghij3gnjksdhfng34g3923asnfbg432rh89wef"
#Const	C_SoloCode			"sdjnfsjdfgn3480gtn3o4ktn3k4tjn34t34tn3jk4tn34tnj43t"
#Const	C_MultiCode			"dcftvgzbhnjkmlkidufmc48957cm34jctg34m739c4thq3mcgn34"
#Const	C_AuthUrl			"https://maniaplanet.steeff.mensa.uberspace.de/obstacle/auth.php"
#Const	C_MapsUrl			"https://maniaplanet.steeff.mensa.uberspace.de/obstacle/map.php"
#Const	C_MultiRecordsUrl	"https://maniaplanet.steeff.mensa.uberspace.de/obstacle/multi.php"
#Const	C_SoloRecordsUrl	"https://maniaplanet.steeff.mensa.uberspace.de/obstacle/solo.php"

/***************************************
	GLOBALES
***************************************/

declare Boolean			G_Records_Permitted;
declare Boolean			G_Records_SendRunData;
declare Boolean			G_Records_Solo;
declare Text			G_Records_AuthCode;
declare Ident			G_Records_AuthRequestId;
declare Ident[]			G_Records_RequestIds;
declare Text[]			G_Records_OpenRequestsUrls;
declare Text[]			G_Records_OpenRequestsData;

/***************************************
	FUNCTIONS
***************************************/

// Parse Boolean to string
Text Private_ToText(Boolean _Bool) {
	if (_Bool) {
		return "true";
	}
	return "false";
}

// Clean up and destroy requests
Void Unload() {
	if (Http.Requests.existskey(G_Records_AuthRequestId)) {
		declare Request <=> Http.Requests[G_Records_AuthRequestId];
		Http.Destroy(Request);
	}
	G_Records_AuthRequestId = NullId;
	for (Index, 0, G_Records_RequestIds.count - 1) {
		declare Id = G_Records_RequestIds[Index];
		if (Http.Requests.existskey(Id)) {
			Http.Destroy(Http.Requests[Id]);
		}
		declare Temp = G_Records_RequestIds.remove(Id);
	}
	G_Records_RequestIds.clear();
	G_Records_OpenRequestsUrls.clear();
	G_Records_OpenRequestsData.clear();
}

// Initialize values
Void Load(Boolean _Solo) {
	Unload();
	
	G_Records_Permitted = False;
	G_Records_SendRunData = False;
	G_Records_Solo = _Solo;
	G_Records_AuthCode = "";
	G_Records_AuthRequestId = NullId;
	G_Records_RequestIds = Ident[];
	G_Records_OpenRequestsUrls = Text[];
	G_Records_OpenRequestsData = Text[];
	
	// Perform authentication
	declare Data =
		"""{
			"now":{{{Now}}},
			"key":"{{{C_AuthCode}}}",
			"solo":{{{Private_ToText(_Solo)}}},
			"serverlogin":"{{{TextLib::URLEncode(ServerLogin)}}}",
			"version":"{{{TextLib::URLEncode(Version)}}}"
		}""";
	declare Request <=> Http.CreatePost(C_AuthUrl^"?now="^Now, Data);
	G_Records_AuthRequestId = Request.Id;
	G_Records_RequestIds.add(Request.Id);
}

// Save request data for later submit
Void Private_DelayRequest(Text _Url, Text _Data) {
	if (TextLib::Length(_Url) <= 0 || TextLib::Length(_Data) <= 0) return;
	G_Records_OpenRequestsUrls.add(_Url);
	G_Records_OpenRequestsData.add(_Data);
}

// Submit map
Void SubmitMap(Boolean _Solo) {
	if (G_Records_Permitted || Map == Null || Map.MapInfo == Null) return;
	declare metadata ObjectiveAuthor for Map = -1;
	declare metadata ObjectiveGold for Map = -1;
	declare metadata ObjectiveSilver for Map = -1;
	declare metadata ObjectiveBronze for Map = -1;
	declare Data =
		"""{
			"now":{{{Now}}},
			"solo":{{{Private_ToText(_Solo)}}},
			"serverlogin":"{{{TextLib::URLEncode(ServerLogin)}}}",
			"key":"{{{TextLib::URLEncode(C_MapCode)}}}",
			"uuid":"{{{Map.Id}}}",
			"name":"{{{TextLib::URLEncode(Map.MapInfo.Name)}}}",
			"authorlogin":"{{{TextLib::URLEncode(Map.AuthorLogin)}}}",
			"authornickname":"{{{TextLib::URLEncode(Map.AuthorNickName)}}}",
			"price":{{{Map.CopperPrice}}},
			"decoration":"{{{TextLib::URLEncode(Map.DecorationName)}}}",
			"authortime":{{{ObjectiveAuthor}}},
			"goldtime":{{{ObjectiveGold}}},
			"silvertime":{{{ObjectiveSilver}}},
			"bronzetime":{{{ObjectiveBronze}}}
		}""";
	if (Http.SlotsAvailable <= 0) {
		Private_DelayRequest(C_MapsUrl, Data);
	} else {
		declare Request = Http.CreatePost(C_MapsUrl^"?now="^Now, Data);
		G_Records_RequestIds.add(Request.Id);
	}
}

// Create data string for checkpoint times
Text Private_ParseCPTimes(Integer[Ident] _CPTimes, Integer _EndTime) {
	declare Times = Integer[];
	foreach (Time in _CPTimes) {
		Times.add(Time);
	}
	Times = Times.sort();
	declare CPTimes = Integer[];
	foreach (Index => Time in Times) {
		if (!Times.existskey(Index - 1)) {
			CPTimes.add(Time);
		} else {
			CPTimes.add(Time - Times[Index - 1]);
		}
	}
	if (Times.count > 0) {
		CPTimes.add(_EndTime - Times[Times.count - 1]);
	} else {
		CPTimes.add(_EndTime);
	}
	declare CPString = "";
	foreach (Index => Time in CPTimes) {
		CPString ^= Time;
		if (Index < CPTimes.count - 1) CPString ^= ",";
	}
	return CPString;
}

// Create run submit request
Void SubmitRun(CSmPlayer _Player, Integer _Time, Integer _Respawns, Integer[Ident] _CPTimes) {
	if (G_Records_Permitted || !G_Records_SendRunData || _Player == Null || _Player.IsFakePlayer || _Time <= 0 || _Respawns < 0) return;
	declare Text Url;
	declare Text Code;
	declare Text AuthCode;
	if (G_Records_Solo) {
		Url = C_SoloRecordsUrl;
		Code = C_SoloCode;
	} else {
		if (TextLib::Length(G_Records_AuthCode) <= 0) return;
		Url = C_MultiRecordsUrl;
		Code = C_MultiCode;
	}
	declare Data =
		"""{
			"now":{{{Now}}},
			"key":"{{{TextLib::URLEncode(Code)}}}",
			"authkey":"{{{TextLib::URLEncode(G_Records_AuthCode)}}}",
			"playerlogin":"{{{TextLib::URLEncode(_Player.Login)}}}",
			"playername":"{{{TextLib::URLEncode(_Player.Name)}}}",
			"playerstars":{{{_Player.User.FameStars}}},
			"playerlanguage":"{{{TextLib::URLEncode(_Player.User.Language)}}}",
			"playerbroadcastlogin":"{{{TextLib::URLEncode(_Player.User.BroadcastTVLogin)}}}",
			"playersteamuser":"{{{TextLib::URLEncode(_Player.User.SteamUserId)}}}",
			"mapuuid":"{{{Map.Id}}}",
			"serverlogin":"{{{TextLib::URLEncode(ServerLogin)}}}",
			"time":{{{_Time}}},
			"respawns":{{{_Respawns}}},
			"checkpoints":"{{{Private_ParseCPTimes(_CPTimes, _Time)}}}"
		}""";
	if (Http.SlotsAvailable <= 0) {
		Private_DelayRequest(C_MapsUrl, Data);
	} else {
		declare Request = Http.CreatePost(Url^"?now="^Now, Data);
		if (G_Records_Solo) {
			declare LoadBegin = Now;
			while (!Request.IsCompleted && Now - LoadBegin < 4000) {
				yield;
				foreach (Event in PendingEvents) Discard(Event);
			}
			if (Request.StatusCode != 200 && Request.StatusCode != 403) {
				log(Now^"> Error on time submit ("^Request.StatusCode^")");
			}
			if (Request.StatusCode == 403) {
				G_Records_Permitted = True;
			}
			Http.Destroy(Request);
		} else {
			G_Records_RequestIds.add(Request.Id);
		}
	}
}

// Manage requests
Void Loop() {
	// Clean up completed requests
	for (Index, 0, G_Records_RequestIds.count - 1) {
		if (!G_Records_RequestIds.existskey(Index)) continue;
		declare RequestId = G_Records_RequestIds[Index];
		if (!Http.Requests.existskey(RequestId)) {
			declare Temp = G_Records_RequestIds.remove(RequestId);
		} else {
			declare Request = Http.Requests[RequestId];
			if (Request.IsCompleted) {
				if (Request.Id == G_Records_AuthRequestId) {
					// Authentication request
					if (Request.StatusCode == 200 && TextLib::Length(Request.Result) > 0) {
						G_Records_SendRunData = True;
						G_Records_AuthCode = Request.Result;
					}
					G_Records_AuthRequestId = NullId;
				} else {
					if (Request.StatusCode != 200 && Request.StatusCode != 403) {
						log(Now^"> Error on submit ("^Request.StatusCode^")");
					}
				}
				if (Request.StatusCode == 403) {
					G_Records_Permitted = True;
				}
				Http.Destroy(Request);
				declare Temp = G_Records_RequestIds.remove(RequestId);
			}
		}
	}
	
	// Manage delayed requests
	if (Http.SlotsAvailable > 0) {
		// Clean up bugged delay data
		if (G_Records_OpenRequestsUrls.existskey(0) && !G_Records_OpenRequestsData.existskey(0)) {
			declare Removed = G_Records_OpenRequestsUrls.removekey(0);
		}
		if (!G_Records_OpenRequestsUrls.existskey(0) && G_Records_OpenRequestsData.existskey(0)) {
			declare Removed = G_Records_OpenRequestsData.removekey(0);
		}
		// Start delayed request
		if (G_Records_OpenRequestsUrls.existskey(0) && G_Records_OpenRequestsData.existskey(0)) {
			declare Url = G_Records_OpenRequestsUrls[0];
			declare Data = G_Records_OpenRequestsData[0];
			declare Request <=> Http.CreatePost(Url^"?now="^Now, Data);
			if (Request != Null) {
				G_Records_RequestIds.add(Request.Id);
				declare Removed = G_Records_OpenRequestsUrls.removekey(0);
				Removed = G_Records_OpenRequestsData.removekey(0);
			}
		}
	}
}
