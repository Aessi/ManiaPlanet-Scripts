/* ---------------------------------------- */
//	Custom script extension for handling	//
//	xmlrpc events from server controllers	//
//	Author: steeffeen						//
//	Contact: schteffens@gmail.com			//
/* ---------------------------------------- */

// Version: 1.0

/* How-To-Use:
Copy-Paste the following line into your mode script below the other #Include lines at the beginning of the file

#Include "Libs/Custom/XmlRpcEvents.Script.txt"

*/

***PlayLoop***
***
// Handle XmlRpc events
foreach (Event in XmlRpc.PendingEvents) {
	switch (Event.Type) {
		case CXmlRpcEvent::EType::Callback: {
			// Parse passed values
			declare Login = "";
			declare ValueText = "";
			declare Begin = 0;
			for (Index, 0, TextLib::Length(Event.Param2)-1) {
				declare Char = TextLib::SubString(Event.Param2, Index, 1);
				switch (Char) {
					case ":": {
						Login = TextLib::SubString(Event.Param2, Begin, Index);
						Begin = Index+1;
					}
					case ";": {
						ValueText = TextLib::SubString(Event.Param2, Begin, Index);
						Begin = Index+1;
					}
				}
			}
			if (Login != "" && ValueText != "" && Begin != 0) {
				declare PlayerId = GetPlayerId(Login);
				if (PlayerId != NullId && Players.existskey(PlayerId)) {
					// Perform actions by callback name
					switch (Event.Param1) {
						case "setAmmoGain": {
							Players[PlayerId].AmmoGain = TextLib::ToReal(ValueText);
						}
						case "setArmorCount": {
							Players[PlayerId].ArmorMax = TextLib::ToInteger(ValueText);
						}
						case "setRocketCount": {
							This.SetPlayerAmmoMax(Players[PlayerId], CSmMode::EWeapon::Rocket, TextLib::ToInteger(ValueText));
						}
						case "setStaminaGain": {
							Players[PlayerId].StaminaGain = TextLib::ToReal(ValueText);
						}
						case "setStaminaPower": {
							Players[PlayerId].StaminaPower = TextLib::ToReal(ValueText);
						}
					}
				}
			} else {
				// Other events
				declare PlayerId = GetPlayerId(Event.Param2);
				if (PlayerId != NullId && Players.existskey(PlayerId)) {
					switch (Event.Param1) {
						case "disableAltMenu": {
							declare UI <=> UIManager.GetUI(Players[PlayerId]);
							if (UI != Null) {
								UI.AltMenuNoDefaultScores = True;
								UI.AltMenuNoCustomScores = True;
							}
						}
						case "enableAltMenu": {
							declare UI <=> UIManager.GetUI(Players[PlayerId]);
							if (UI != Null) {
								UI.AltMenuNoDefaultScores = False;
								UI.AltMenuNoCustomScores = False;
							}
						}
					}
				}
			}
		}
	}
}
***
